{"meta":{"title":"DreamcatcherDENG 的个人博客","subtitle":"","description":null,"author":"dreamcatcherdeng","url":"https://dreamcatcherdeng.gitee.io/personal-blog"},"pages":[{"title":"About","date":"2021-09-21T15:32:15.000Z","updated":"2021-09-21T15:43:25.873Z","comments":true,"path":"about/index.html","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/about/index.html","excerpt":"","text":"My name is Dreamcatcher"},{"title":"Archives","date":"2021-09-21T15:31:56.000Z","updated":"2021-10-12T03:24:09.853Z","comments":true,"path":"archives/index.html","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/archives/index.html","excerpt":"","text":""},{"title":"Tags","date":"2021-09-21T15:31:38.000Z","updated":"2021-09-21T15:41:11.220Z","comments":true,"path":"tags/index.html","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/tags/index.html","excerpt":"","text":""},{"title":"Categories","date":"2021-09-21T15:32:06.000Z","updated":"2021-09-21T15:40:41.659Z","comments":true,"path":"categories/index.html","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"ViewPager","slug":"ViewPager","date":"2022-05-06T11:59:04.603Z","updated":"2022-05-06T11:59:04.603Z","comments":true,"path":"2022/05/06/ViewPager/","link":"","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/2022/05/06/ViewPager/","excerpt":"1.ViewPager实现翻页效果 2.使用ViewPager2实现滑动翻页效果","text":"1.ViewPager实现翻页效果 2.使用ViewPager2实现滑动翻页效果 ViewPager实现翻页效果布局资源代码activity_main.xml 123456789101112131415&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;androidx.viewpager.widget.ViewPager android:id=&quot;@+id/my_view_pager&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; /&gt;&lt;/LinearLayout&gt; layout1.xml 12345678&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;#00BCD4&quot; &gt;&lt;/LinearLayout&gt; … Java代码创建ViewPager适配器 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051public class MyAdapter extends PagerAdapter &#123; public MyAdapter(List&lt;View&gt; listView) &#123; this.listView = listView; &#125; List&lt;View&gt; listView; /** * 适配器将自动调用该方法获取每一个Item * @param container * @param position * @return */ @NonNull @Override public Object instantiateItem(@NonNull ViewGroup container, int position) &#123; //将List中的View拿出来，放到container中 container.addView(listView.get(position % 3),0); return listView.get(position % 3); &#125; /** * 获取页码数 * @return */ @Override public int getCount() &#123; return listView.size(); &#125; @Override public boolean isViewFromObject(@NonNull View view, @NonNull Object object) &#123; return view == object; &#125; /** * 当对象销毁时应该将Item从容器中移除 * @param container * @param position * @param object */ @Override public void destroyItem(@NonNull ViewGroup container, int position, @NonNull Object object) &#123; container.removeView(listView.get(position)); &#125; &#125; 123456789101112131415161718192021222324252627282930public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); //解析布局资源 LayoutInflater layoutInflater = getLayoutInflater(); View layout1 = layoutInflater.inflate(R.layout.layout1,null); View layout2 = layoutInflater.inflate(R.layout.layout2,null); View layout3 = layoutInflater.inflate(R.layout.layout3,null); //将布局资源添加到集合中 List&lt;View&gt; listView = new ArrayList&lt;&gt;(); listView.add(layout1); listView.add(layout2); listView.add(layout3); //使用自定义的的ViewPager Adapter MyAdapter myAdapter = new MyAdapter(listView); ViewPager viewPager = findViewById(R.id.my_view_pager); //设置ViewPager Adapter viewPager.setAdapter(myAdapter); &#125;&#125; 使用ViewPager2实现滑动翻页效果布局资源文件1234567891011121314151617&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; tools:context=&quot;.ViewPagerActivity&quot;&gt; &lt;androidx.viewpager2.widget.ViewPager2 android:id=&quot;@+id/viewPager&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;0dp&quot; android:layout_weight=&quot;1&quot; android:background=&quot;#FF0000&quot; /&gt;&lt;/LinearLayout&gt; Java代码ViewPager2适配器ViewPager2适配器使用的是RecycleRecyclerView的适配器 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960public class MyViewPagerAdapter extends RecyclerView.Adapter&lt;MyViewPagerAdapter.MyViewHolder&gt; &#123; @NonNull @Override public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) &#123; return new MyViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item_view_pager, parent, false)); &#125; @Override public void onBindViewHolder(@NonNull MyViewHolder holder, int position) &#123; holder.textView.setText(titles.get(position % 3)); holder.textView.setBackgroundColor(Color.parseColor(colors.get(position % 3))); &#125; @Override public int getItemCount() &#123; return 10; &#125; public class MyViewHolder extends RecyclerView.ViewHolder &#123; RelativeLayout relativeLayout; TextView textView; public MyViewHolder(@NonNull View itemView) &#123; super(itemView); relativeLayout = itemView.findViewById(R.id.container); textView = itemView.findViewById(R.id.tv_show); &#125; &#125; public List&lt;String&gt; getTitles() &#123; List&lt;String&gt; title = new ArrayList&lt;&gt;(); title.add(&quot;Hello&quot;); title.add(&quot;World&quot;); title.add(&quot;Android&quot;); return title; &#125; public List&lt;String&gt; getColors() &#123; List&lt;String&gt; color = new ArrayList&lt;&gt;(); color.add(&quot;#FF00FF&quot;); color.add(&quot;#FFFF00&quot;); color.add(&quot;#00FFFF&quot;); return color; &#125; private List&lt;String&gt; colors; private List&lt;String&gt; titles; public MyViewPagerAdapter() &#123; colors = getColors(); titles = getTitles(); &#125;&#125; 主界面代码1234567891011121314public class ViewPagerActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_view_pager); ViewPager2 viewPager = findViewById(R.id.viewPager);// MyViewPagerAdapter myViewPagerAdapter = new MyViewPagerAdapter(); viewPager.setAdapter(myViewPagerAdapter); &#125;&#125;","categories":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 控件","slug":"Android/Android-控件","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%8E%A7%E4%BB%B6/"},{"name":"效果","slug":"效果","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E6%95%88%E6%9E%9C/"},{"name":"ViewPager实现翻页效果","slug":"效果/ViewPager实现翻页效果","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E6%95%88%E6%9E%9C/ViewPager%E5%AE%9E%E7%8E%B0%E7%BF%BB%E9%A1%B5%E6%95%88%E6%9E%9C/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 控件","slug":"Android/Android-控件","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%8E%A7%E4%BB%B6/"},{"name":"效果","slug":"效果","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E6%95%88%E6%9E%9C/"},{"name":"ViewPager实现翻页效果","slug":"效果/ViewPager实现翻页效果","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E6%95%88%E6%9E%9C/ViewPager%E5%AE%9E%E7%8E%B0%E7%BF%BB%E9%A1%B5%E6%95%88%E6%9E%9C/"}]},{"title":"Fragment","slug":"Fragment","date":"2022-05-06T11:59:04.427Z","updated":"2022-05-06T11:59:04.428Z","comments":true,"path":"2022/05/06/Fragment/","link":"","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/2022/05/06/Fragment/","excerpt":"在Activity中使用单个Fragment 在Activity中使用多个Fragment 动态添加Fragment Activity与Fragment通信 Fragment生命周期 使用Fragment和ViewPager2实现navigation翻页效果","text":"在Activity中使用单个Fragment 在Activity中使用多个Fragment 动态添加Fragment Activity与Fragment通信 Fragment生命周期 使用Fragment和ViewPager2实现navigation翻页效果 在Activity中使用单个Fragment创建一个空的Fragment 修改fragment_blank.xml123456789101112131415161718192021222324&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;.BlankFragment&quot; android:id=&quot;@+id/blank_fragment&quot; android:orientation=&quot;vertical&quot;&gt; &lt;ImageView android:id=&quot;@+id/image&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;0dp&quot; android:background=&quot;#03A9F4&quot; android:layout_weight=&quot;1&quot; app:srcCompat=&quot;@drawable/ic_launcher_foreground&quot; /&gt; &lt;Button android:id=&quot;@+id/button&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮&quot; /&gt;&lt;/LinearLayout&gt; 解析fragment_blank.xml123456789101112131415161718192021222324252627- 解析`fragment_blank.xml` ```java public class BlankFragment extends Fragment &#123; private View root; public static BlankFragment newInstance(String param1, String param2) &#123; BlankFragment fragment = new BlankFragment(); return fragment; &#125; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); &#125; @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123; if (root == null) &#123; root = inflater.inflate(R.layout.fragment_blank,container,false); &#125; return root; &#125; &#125; 在activity_main.xml中使用fragment_blank.xml12345678910111213141516&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;fragment android:id=&quot;@+id/fragment&quot; android:name=&quot;com.example.fragment.BlankFragment&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; /&gt;&lt;/LinearLayout&gt; 在Activity中使用多个Fragment在activity_main.xml中多次使用同一个Fragment123456789101112131415161718192021222324&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;fragment android:id=&quot;@+id/fragment&quot; android:name=&quot;com.example.fragment.BlankFragment&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;0dp&quot; android:layout_weight=&quot;1&quot;/&gt; &lt;fragment android:id=&quot;@+id/fragment1&quot; android:name=&quot;com.example.fragment.BlankFragment&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;0dp&quot; android:layout_weight=&quot;1&quot;/&gt;&lt;/LinearLayout&gt; 动态添加Fragmentactivit_main.xml布局资源文件12345678910111213141516171819202122232425262728293031&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;FrameLayout android:id=&quot;@+id/frame&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;0dp&quot; android:layout_weight=&quot;1&quot; /&gt; &lt;Button android:id=&quot;@+id/button1&quot; android:onClick=&quot;onclick&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;点我切换BlankFragment1&quot;/&gt; &lt;Button android:id=&quot;@+id/button2&quot; android:onClick=&quot;onclick&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;点我切换BlankFragment2&quot;/&gt;&lt;/LinearLayout&gt; 使用java代码动态替换Fragment12345678910111213141516171819202122232425262728public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); &#125; public void onclick(View view) &#123; switch (view.getId()) &#123; case R.id.button1: replacement(new BlankFragment1()); break; case R.id.button2: replacement(new BlankFragment2()); break; &#125; &#125; private void replacement(Fragment blankFragment) &#123; FragmentManager supportFragmentManager = getSupportFragmentManager(); FragmentTransaction fragmentTransaction = supportFragmentManager.beginTransaction(); fragmentTransaction.replace(R.id.frame,blankFragment); fragmentTransaction.commit(); &#125;&#125; Activity与Fragment通信使用Bundle进行通信设置点击事件，将数据发送给Fragment 1234567891011121314151617181920public void onclick(View view) &#123; Bundle bundle = new Bundle(); Button button = (Button) view; String text = (String) button.getText(); bundle.putString(&quot;text&quot;,text); switch (view.getId()) &#123; case R.id.button1: BlankFragment1 blankFragment1 = new BlankFragment1(); blankFragment1.setArguments(bundle); replacement(blankFragment1); break; case R.id.button2: BlankFragment2 blankFragment2 = new BlankFragment2(); blankFragment2.setArguments(bundle); replacement(blankFragment2); replacement(blankFragment2); break; &#125; &#125; Fragment接受数据，并处理数据 123456789101112131415161718192021222324252627282930public class BlankFragment1 extends Fragment &#123; private View root; public static BlankFragment1 newInstance(String param1, String param2) &#123; BlankFragment1 fragment = new BlankFragment1(); return fragment; &#125; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); &#125; @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123; if (root == null) &#123; root = inflater.inflate(R.layout.fragment_blank1, container, false); &#125; Bundle arguments = this.getArguments(); TextView textView = root.findViewById(R.id.textview); String text = arguments.getString(&quot;text&quot;); textView.setText(text); return root; &#125;&#125; 使用回调方法进行通信定义回调接口12345public interface IFragmentCallBack &#123; void sendMsgToActivity(String s); String receiveMsgFromActivity();&#125; 在Fragment声明并使用该接口的方法12345678910111213141516171819202122232425262728293031323334353637383940414243public class BlankFragment1 extends Fragment &#123; private View root; private IFragmentCallBack callBack; public void setCallBack(IFragmentCallBack callBack) &#123; this.callBack = callBack; &#125; public static BlankFragment1 newInstance(String param1, String param2) &#123; BlankFragment1 fragment = new BlankFragment1(); return fragment; &#125; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); &#125; @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123; if (root == null) &#123; root = inflater.inflate(R.layout.fragment_blank1, container, false); &#125; TextView textView = root.findViewById(R.id.textview); Button bt = root.findViewById(R.id.bt_change); bt.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; callBack.sendMsgToActivity(bt.getText().toString()); &#125; &#125;); String s = callBack.receiveMsgFromActivity(); textView.setText(s); return root; &#125;&#125; 在Activity使用Fragment，使用匿名内部类实现接口1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); &#125; public void onclick(View view) &#123; Button button = (Button) view; switch (view.getId()) &#123; case R.id.button1: BlankFragment1 blankFragment1 = new BlankFragment1(); blankFragment1.setCallBack(new IFragmentCallBack() &#123; @Override public void sendMsgToActivity(String s) &#123; button.setText(s); &#125; @Override public String receiveMsgFromActivity() &#123; return &quot;blankFragment1&quot;; &#125; &#125;); replacement(blankFragment1); break; case R.id.button2: BlankFragment2 blankFragment2 = new BlankFragment2(); blankFragment2.setCallBack(new IFragmentCallBack() &#123; @Override public void sendMsgToActivity(String s) &#123; button.setText(s); &#125; @Override public String receiveMsgFromActivity() &#123; return &quot;blankFragment2&quot;; &#125; &#125;); replacement(blankFragment2); break; &#125; &#125; private void replacement(Fragment blankFragment) &#123; FragmentManager supportFragmentManager = getSupportFragmentManager(); FragmentTransaction fragmentTransaction = supportFragmentManager.beginTransaction(); fragmentTransaction.replace(R.id.frame,blankFragment); fragmentTransaction.addToBackStack(null); fragmentTransaction.commit(); &#125;&#125; Frament生命周期 使用Fragment和ViewPager2实现navigation翻页效果底部导航栏图标布局文件nav_bottom123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:id=&quot;@+id/bottom_nav&quot; android:layout_height=&quot;70dp&quot; android:layout_width=&quot;match_parent&quot; android:background=&quot;@color/gray&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;LinearLayout android:layout_width=&quot;0dp&quot; android:layout_height=&quot;match_parent&quot; android:layout_weight=&quot;1&quot; android:layout_gravity=&quot;center&quot; android:id=&quot;@+id/tab_message&quot; android:orientation=&quot;vertical&quot;&gt; &lt;ImageView android:id=&quot;@+id/iv_message&quot; android:layout_width=&quot;32dp&quot; android:layout_height=&quot;32dp&quot; android:layout_weight=&quot;1&quot; android:layout_gravity=&quot;center&quot; android:src=&quot;@drawable/message&quot; &gt;&lt;/ImageView&gt; &lt;TextView android:id=&quot;@+id/tv_message&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:gravity=&quot;center&quot; android:layout_gravity=&quot;center&quot; android:text=&quot;微信&quot; android:textSize=&quot;16sp&quot; /&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width=&quot;0dp&quot; android:layout_height=&quot;match_parent&quot; android:layout_weight=&quot;1&quot; android:layout_gravity=&quot;center&quot; android:id=&quot;@+id/tab_contacts&quot; android:orientation=&quot;vertical&quot;&gt; &lt;ImageView android:id=&quot;@+id/iv_contacts&quot; android:layout_width=&quot;32dp&quot; android:layout_height=&quot;32dp&quot; android:layout_weight=&quot;1&quot; android:layout_gravity=&quot;center&quot; android:src=&quot;@drawable/contacts&quot; &gt;&lt;/ImageView&gt; &lt;TextView android:id=&quot;@+id/tv_contacts&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:gravity=&quot;center&quot; android:layout_gravity=&quot;center&quot; android:text=&quot;联系人&quot; android:textSize=&quot;16sp&quot; /&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width=&quot;0dp&quot; android:layout_height=&quot;match_parent&quot; android:layout_weight=&quot;1&quot; android:layout_gravity=&quot;center&quot; android:id=&quot;@+id/tab_find&quot; android:orientation=&quot;vertical&quot;&gt; &lt;ImageView android:id=&quot;@+id/iv_find&quot; android:layout_width=&quot;32dp&quot; android:layout_height=&quot;32dp&quot; android:layout_weight=&quot;1&quot; android:layout_gravity=&quot;center&quot; android:src=&quot;@drawable/find&quot; &gt;&lt;/ImageView&gt; &lt;TextView android:id=&quot;@+id/tv_find&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:gravity=&quot;center&quot; android:layout_gravity=&quot;center&quot; android:text=&quot;发现&quot; android:textSize=&quot;16sp&quot; /&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width=&quot;0dp&quot; android:layout_height=&quot;match_parent&quot; android:layout_weight=&quot;1&quot; android:layout_gravity=&quot;center&quot; android:id=&quot;@+id/tab_me&quot; android:orientation=&quot;vertical&quot;&gt; &lt;ImageView android:id=&quot;@+id/iv_me&quot; android:layout_width=&quot;32dp&quot; android:layout_height=&quot;32dp&quot; android:layout_weight=&quot;1&quot; android:layout_gravity=&quot;center&quot; android:src=&quot;@drawable/me&quot; &gt;&lt;/ImageView&gt; &lt;TextView android:id=&quot;@+id/tv_me&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:gravity=&quot;center&quot; android:layout_gravity=&quot;center&quot; android:text=&quot;微信&quot; android:textSize=&quot;16sp&quot; /&gt; &lt;/LinearLayout&gt;&lt;/LinearLayout&gt; activity_main.xml布局资源文件123456789101112131415161718&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;androidx.viewpager2.widget.ViewPager2 android:id=&quot;@+id/viewPager&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;0dp&quot; android:layout_weight=&quot;1&quot; /&gt; &lt;include layout=&quot;@layout/nav_bottom&quot;/&gt;&lt;/LinearLayout&gt; 创建每一个Fragment资源布局文件为fragment_we_chat.xml 12345678910111213141516171819&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:id=&quot;@+id/fragment_wechat&quot; tools:context=&quot;.WeChatFragment&quot;&gt; &lt;TextView android:id=&quot;@+id/tv&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:text=&quot;聊天&quot; android:gravity=&quot;center&quot; android:textSize=&quot;50sp&quot; android:textColor=&quot;#8BC34A&quot; /&gt;&lt;/FrameLayout&gt; Java代码继承Fragment解析布局资源 1234567891011121314151617181920212223242526272829303132333435363738public class WeChatFragment extends Fragment &#123; private View rootView; private String mTitle = null; public static WeChatFragment newInstance(String title) &#123; WeChatFragment fragment = new WeChatFragment(); Bundle bundle = new Bundle(); bundle.putString(&quot;title&quot;, title); fragment.setArguments(bundle); return fragment; &#125; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); Bundle arguments = getArguments(); if (getArguments() != null) &#123; mTitle = arguments.getString(&quot;title&quot;); &#125; &#125; @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123; if (rootView == null) &#123; rootView = inflater.inflate(R.layout.fragment_we_chat, container, false); &#125; initView(); return rootView; &#125; private void initView() &#123; TextView textView = rootView.findViewById(R.id.tv); textView.setText(mTitle); &#125;&#125; 实现ViewPager的Adapter 1234567891011121314151617181920public class MyFragmentStateAdapter extends FragmentStateAdapter &#123; List&lt;Fragment&gt; fragmentList; public MyFragmentStateAdapter(@NonNull FragmentManager fragmentManager, @NonNull Lifecycle lifecycle,List&lt;Fragment&gt; fragmentList) &#123; super(fragmentManager, lifecycle); this.fragmentList = fragmentList; &#125; @NonNull @Override public Fragment createFragment(int position) &#123; return fragmentList.get(position); &#125; @Override public int getItemCount() &#123; return fragmentList.size(); &#125;&#125; MainActivity代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677public class MainActivity extends AppCompatActivity &#123; private ViewPager2 viewPager; private View currentSelect; private List&lt;View&gt; viewList = new ArrayList&lt;&gt;(); int[] clickSrc = new int[]&#123; R.id.tab_message, R.id.tab_contacts, R.id.tab_find, R.id.tab_me &#125;; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); initView(); initFragment(); &#125; /** * 初始化View，为每个View设置监听器，并将View放到数组中方便索引 */ private void initView() &#123; for (Integer integer : clickSrc) &#123; currentSelect = findViewById(integer); viewList.add(currentSelect); currentSelect.setOnClickListener(this::onClick); &#125; currentSelect = viewList.get(0); &#125; /** * 初始化Fragment，创建每个Fragment */ void initFragment() &#123; viewPager = findViewById(R.id.viewPager); FragmentManager fragmentManager = getSupportFragmentManager(); List&lt;Fragment&gt; fragmentList = new ArrayList&lt;&gt;(); fragmentList.add(WeChatFragment.newInstance(&quot;聊天&quot;)); fragmentList.add(ContactsFragment.newInstance(&quot;联系人&quot;)); fragmentList.add(FindFragment.newInstance(&quot;发现&quot;)); fragmentList.add(AboutFragment.newInstance(&quot;我&quot;)); //此处使用的Adapter为RecyclerViewAdapter的子类，该Adapter更适合Fragment MyFragmentStateAdapter myViewPagerAdapter = new MyFragmentStateAdapter(fragmentManager, getLifecycle(), fragmentList); viewPager.setAdapter(myViewPagerAdapter); viewPager.registerOnPageChangeCallback(new ViewPager2.OnPageChangeCallback() &#123; /** * 当Pager被选中时，更改导航栏图标，可以直接调用onClick方法， * @param position */ @Override public void onPageSelected(int position) &#123; super.onPageSelected(position); View view = viewList.get(position); onClick(view); &#125; &#125;); &#125; /** * 导航栏点击事件，每个图标被点击就表示该图标被选中，上一个选中的图标应该取消选中 * @param v */ public void onClick(View v) &#123; if (currentSelect != null) &#123; currentSelect.setSelected(false); &#125; //当鼠标点击图标时，切换导航图片资源 v.setSelected(true); //当鼠标点击图标时，切换Fragment viewPager.setCurrentItem(Arrays.binarySearch(clickSrc, v.getId())); currentSelect = v; &#125;&#125;","categories":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 控件","slug":"Android/Android-控件","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%8E%A7%E4%BB%B6/"},{"name":"效果","slug":"效果","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E6%95%88%E6%9E%9C/"},{"name":"Navigation翻页","slug":"效果/Navigation翻页","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E6%95%88%E6%9E%9C/Navigation%E7%BF%BB%E9%A1%B5/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 控件","slug":"Android/Android-控件","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%8E%A7%E4%BB%B6/"},{"name":"效果","slug":"效果","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E6%95%88%E6%9E%9C/"},{"name":"Navigation翻页","slug":"效果/Navigation翻页","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E6%95%88%E6%9E%9C/Navigation%E7%BF%BB%E9%A1%B5/"}]},{"title":"模拟Android的点击事件","slug":"SimulateActivity","date":"2022-05-05T01:31:58.290Z","updated":"2022-05-06T11:59:04.561Z","comments":true,"path":"2022/05/05/SimulateActivity/","link":"","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/2022/05/05/SimulateActivity/","excerpt":"定义View类 定义View的子类，TextView和孙子类Button 编写layout.xml文件和manifest.xml文件 定义布局资源加载器类 定义抽象类Activity 重写抽象类中的方法 定义Manifest加载加载器类","text":"定义View类 定义View的子类，TextView和孙子类Button 编写layout.xml文件和manifest.xml文件 定义布局资源加载器类 定义抽象类Activity 重写抽象类中的方法 定义Manifest加载加载器类 模拟Android点击事件定义View类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111public class View &#123; /** * 点击事件监听器 */ ClickListener clickListener; /** * 是否可以点击 */ private boolean clickAble; /** * 组件ID */ private String id; /** * 组件内容 */ private String text; /** * 组件的高度 */ private String height; /** * 组件的宽度 */ private String weight; public boolean isClickAble() &#123; return clickAble; &#125; public void setClickAble(boolean clickAble) &#123; this.clickAble = clickAble; &#125; public String getId() &#123; return id; &#125; public void setId(String id) &#123; this.id = id; &#125; public String getText() &#123; return text; &#125; public void setText(String text) &#123; this.text = text; &#125; public String getHeight() &#123; return height; &#125; public void setHeight(String height) &#123; this.height = height; &#125; public String getWeight() &#123; return weight; &#125; public void setWeight(String weight) &#123; this.weight = weight; &#125; /** * 设置组件的点击事件，使用clickListner的回调方法 */ public void onClick() &#123; if (clickAble &amp;&amp; clickListener != null) &#123; clickListener.onclick(this); &#125; else if (!clickAble) &#123; System.out.println(getId() + &quot;不可点击&quot;); &#125; else &#123; System.out.println(getId() + &quot;没有设置监听器&quot;); &#125; &#125; /** * 设置组件的点击事件监听器，如果设置了那么为可以点击，如果没设置那默认为不可以点击 * * @param listener */ void setOnClickListener(ClickListener listener) &#123; clickAble = true; clickListener = listener; &#125; /** * 点击事件监听器的接口 */ interface ClickListener &#123; void onclick(View view); &#125; @Override public String toString() &#123; return this.getClass().getName() + &quot;&#123;&quot; + &quot;clickAble=&quot; + clickAble + &quot;, id=&#x27;&quot; + id + &#x27;\\&#x27;&#x27; + &quot;, text=&#x27;&quot; + text + &#x27;\\&#x27;&#x27; + &quot;, height=&#x27;&quot; + height + &#x27;\\&#x27;&#x27; + &quot;, weight=&#x27;&quot; + weight + &#x27;\\&#x27;&#x27; + &#x27;&#125;&#x27;; &#125;&#125; 定义View的子类，TextView和孙子类Button1234567public class TextView extends View &#123; @Override public void setText(String text) &#123; super.setText(text); &#125;&#125; 12public class Button extends TextView&#123;&#125; 编写layout.xml文件和manifest.xml文件123456789101112131415161718192021222324252627282930313233&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;Layout&gt; &lt;TextView id = &quot;@+id/textview&quot; text = &quot;textview&quot; width = &quot;100dp&quot; height = &quot;100dp&quot; &gt; &lt;Button id = &quot;@+id/button1&quot; text = &quot;button1&quot; width = &quot;10dp&quot; height = &quot;10dp&quot; clickable = &quot;true&quot; &gt; &lt;TextView id = &quot;@+id/textview1&quot; text = &quot;textview&quot; width = &quot;100dp&quot; height = &quot;100dp&quot; clickable = &quot;false&quot; /&gt; &lt;/Button&gt; &lt;/TextView&gt; &lt;Button id = &quot;@+id/button&quot; text = &quot;button&quot; width = &quot;10dp&quot; height = &quot;10dp&quot; clickable = &quot;true&quot; /&gt;&lt;/Layout&gt; 1234&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;manifest&gt; &lt;Main entry=&quot;.MainActivity&quot;&gt;&lt;/Main&gt;&lt;/manifest&gt; 定义布局资源加载器类12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576public class LayoutLoader &#123; /** * 使用HashMap存放从.xml中加载的组件 */ private static HashMap&lt;String, View&gt; layoutMap = new HashMap&lt;&gt;(); public static HashMap&lt;String, View&gt; getLayoutMap() &#123; try &#123; layoutLoader(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return layoutMap; &#125; /** * layout加载方法，解析并加载.xml中的组件，使用反射创建对应的类 * @throws Exception */ private static void layoutLoader() throws Exception &#123; File file = new File(&quot;layout/layout.xml&quot;); Document parse = parse(file); Iterator&lt;Element&gt; elementIterator = parse.getRootElement().elementIterator(); while (elementIterator.hasNext()) &#123; Element next = elementIterator.next(); View view = ConvertElement2View(next); layoutMap.put(view.getId(),view); &#125; &#125; public static Document parse(File file) throws Exception &#123; SAXReader reader = new SAXReader(); Document document = reader.read(file); return document; &#125; /** * 递归加载layout.xml中的组件，将其存放的HashMap中 * @param next * @return * @throws Exception */ private static View ConvertElement2View(Element next) throws Exception &#123; //添加自身节点到hashmap中 Class&lt;?&gt; aClass = Class.forName(next.getName()); View v = (View) aClass.newInstance(); String id = next.attributeValue(&quot;id&quot;); String text = next.attributeValue(&quot;text&quot;); String height = next.attributeValue(&quot;height&quot;); String weight = next.attributeValue(&quot;width&quot;); String clickable = next.attributeValue(&quot;clickable&quot;); v.setId(value(id)); v.setText(value(text)); v.setHeight(value(height)); v.setWeight(value(weight)); v.setClickAble(clickable == null?false:clickable.equals(&quot;true&quot;)); //添加子节点到hashmap中 Iterator&lt;Element&gt; elementIterator = next.elementIterator(); while (elementIterator.hasNext()) &#123; Element child = elementIterator.next(); View view = ConvertElement2View(child); layoutMap.put(view.getId(),view); &#125; return v; &#125; private static String value(String v) &#123; return v == null ? &quot;&quot; : v; &#125;&#125; 定义抽象类Activity12345678910111213141516171819202122232425262728293031323334353637383940public abstract class Activity &#123; /** * 使用HashMap存储从.xml文件中加载的组件 */ private static HashMap&lt;String, View&gt; layoutMap = LayoutLoader.getLayoutMap(); public abstract void onCreate(); /** * 设置点击点击事件分发器，此处的点击使用输入的View类的id模拟 * @param next */ public void dispatcher(String next) &#123; View viewById = findViewById(next); if (viewById != null) &#123; viewById.onClick(); &#125; &#125; /** * 通过id寻找View * @param id * @return */ public View findViewById(String id) &#123; return layoutMap.get(&quot;@+id/&quot; + id); &#125; /** * 程序运行的方法 */ public void run() &#123; onCreate(); Scanner scanner = new Scanner(System.in); while (scanner.hasNext()) &#123; dispatcher(scanner.next()); &#125; &#125;&#125; 重写抽象类中的方法12345678910111213141516171819202122232425public class MainActivity extends Activity &#123; @Override public void onCreate() &#123; TextView textView = (TextView) findViewById(&quot;textview&quot;); textView.setOnClickListener(new TextView.ClickListener() &#123; @Override public void onclick(View view) &#123; System.out.println(view.getText() + &quot;被点击了&quot;); System.out.println(view); &#125; &#125;); Button button = (Button)findViewById(&quot;button&quot;); button.setOnClickListener(new TextView.ClickListener() &#123; @Override public void onclick(View view) &#123; System.out.println(view.getText() + &quot;被点击了&quot;); System.out.println(view); &#125; &#125;); &#125;&#125; 定义Manifest加载器类1234567891011121314151617181920212223import org.dom4j.Document;import org.dom4j.Element;public class ManifestLoader &#123; /** * 使用反射通过manifest.xml文件创建入口Activity * @param args * @throws Exception */ public static void main(String[] args) throws Exception &#123; File file = new File(&quot;manifest/manifest.xml&quot;); Document document = LayoutLoader.parse(file); Element rootElement = document.getRootElement(); Element main = rootElement.element(&quot;Main&quot;); String s = main.attributeValue(&quot;entry&quot;); Class&lt;?&gt; aClass = Class.forName(s.substring(1)); Activity app = (Activity) aClass.newInstance(); app.run(); &#125;&#125; 运行效果123456789101112131415/*输出：textviewtextview被点击了TextView&#123;clickAble=true, id=&#x27;@+id/textview&#x27;, text=&#x27;textview&#x27;, height=&#x27;100dp&#x27;, weight=&#x27;100dp&#x27;&#125;textview1@+id/textview1不可点击buttonbutton被点击了Button&#123;clickAble=true, id=&#x27;@+id/button&#x27;, text=&#x27;button&#x27;, height=&#x27;10dp&#x27;, weight=&#x27;10dp&#x27;&#125;button1@+id/button1没有设置监听器*/","categories":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"学习感悟","slug":"Android/学习感悟","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/%E5%AD%A6%E4%B9%A0%E6%84%9F%E6%82%9F/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"学习感悟","slug":"Android/学习感悟","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/%E5%AD%A6%E4%B9%A0%E6%84%9F%E6%82%9F/"}]},{"title":"Animation","slug":"Animation","date":"2022-05-05T01:31:58.140Z","updated":"2022-05-06T11:59:04.381Z","comments":true,"path":"2022/05/05/Animation/","link":"","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/2022/05/05/Animation/","excerpt":"帧动画 补间动画 属性动画","text":"帧动画 补间动画 属性动画 帧动画在drawable资源类路径下建立一个frame.xml文件，里面存放动画的每一帧的图片资源 1234567891011121314151617181920&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;item android:drawable=&quot;@drawable/campfire01&quot; android:duration=&quot;100&quot;/&gt; &lt;item android:drawable=&quot;@drawable/campfire02&quot; android:duration=&quot;100&quot;/&gt; &lt;item android:drawable=&quot;@drawable/campfire03&quot; android:duration=&quot;100&quot;/&gt; &lt;item android:drawable=&quot;@drawable/campfire04&quot; android:duration=&quot;100&quot;/&gt; &lt;item android:drawable=&quot;@drawable/campfire05&quot; android:duration=&quot;100&quot;/&gt; &lt;item android:drawable=&quot;@drawable/campfire06&quot; android:duration=&quot;100&quot;/&gt; &lt;item android:drawable=&quot;@drawable/campfire07&quot; android:duration=&quot;100&quot;/&gt; &lt;item android:drawable=&quot;@drawable/campfire08&quot; android:duration=&quot;100&quot;/&gt; &lt;item android:drawable=&quot;@drawable/campfire09&quot; android:duration=&quot;100&quot;/&gt; &lt;item android:drawable=&quot;@drawable/campfire10&quot; android:duration=&quot;100&quot;/&gt; &lt;item android:drawable=&quot;@drawable/campfire11&quot; android:duration=&quot;100&quot;/&gt; &lt;item android:drawable=&quot;@drawable/campfire12&quot; android:duration=&quot;100&quot;/&gt; &lt;item android:drawable=&quot;@drawable/campfire13&quot; android:duration=&quot;100&quot;/&gt; &lt;item android:drawable=&quot;@drawable/campfire14&quot; android:duration=&quot;100&quot;/&gt; &lt;item android:drawable=&quot;@drawable/campfire15&quot; android:duration=&quot;100&quot;/&gt; &lt;item android:drawable=&quot;@drawable/campfire16&quot; android:duration=&quot;100&quot;/&gt; &lt;item android:drawable=&quot;@drawable/campfire17&quot; android:duration=&quot;100&quot;/&gt;&lt;/animation-list&gt; 在activity_main.xml文件中使用它 123456789101112&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:id=&quot;@+id/frame_animation&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;@drawable/frame&quot; tools:context=&quot;.FrameAnimationActivity&quot;&gt;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt; 在FrameAnimationActivity中设置监听事件，启动动画 1234567891011121314151617181920212223public class FrameAnimationActivity extends AppCompatActivity &#123; boolean flag = true; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_frame_animation); ConstraintLayout constraintLayout = findViewById(R.id.frame_animation); AnimationDrawable background = (AnimationDrawable)constraintLayout.getBackground(); constraintLayout.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; if (flag)&#123; background.start(); &#125;else&#123; background.stop(); &#125; flag = !flag; &#125; &#125;); &#125;&#125; 补间动画补间动画四种操作 操作 说明 scale 缩放 translate 平移 rotate 旋转 alpha 透明度 alpha.xml 1234567&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;alpha android:fromAlpha=&quot;0&quot; android:toAlpha=&quot;1&quot; android:duration=&quot;2000&quot; /&gt;&lt;/set&gt; rotate.xml123456789&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;rotate android:fromDegrees=&quot;0&quot; android:toDegrees=&quot;180&quot; android:pivotX=&quot;0%&quot; android:pivotY=&quot;50%&quot; android:duration=&quot;2000&quot; /&gt;&lt;/set&gt; scale.xml12345678910&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;scale android:pivotY=&quot;0%&quot; android:pivotX=&quot;0%&quot; android:fromXScale=&quot;1&quot; android:fromYScale=&quot;1&quot; android:toXScale=&quot;2&quot; android:toYScale=&quot;2&quot; android:duration=&quot;2000&quot;/&gt;&lt;/set&gt; translate.xml 12345678910&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;translate android:fromXDelta=&quot;0&quot; android:fromYDelta=&quot;0&quot; android:toXDelta=&quot;-100&quot; android:toYDelta=&quot;-200&quot; android:duration=&quot;2000&quot; /&gt;&lt;/set&gt; activity_tween_animation.xml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:id=&quot;@+id/tween_animation&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;.TweenAnimationActivity&quot;&gt; &lt;ImageView android:id=&quot;@+id/image&quot; android:layout_width=&quot;800dp&quot; android:layout_height=&quot;400dp&quot; android:src=&quot;@drawable/campfire01&quot; app:layout_constraintBottom_toBottomOf=&quot;parent&quot; app:layout_constraintEnd_toEndOf=&quot;parent&quot; app:layout_constraintStart_toStartOf=&quot;parent&quot; app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; app:layout_constraintBottom_toBottomOf=&quot;parent&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/image&quot;&gt; &lt;Button android:id=&quot;@+id/alpha&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;alpha&quot; android:onClick=&quot;alpha&quot;/&gt; &lt;Button android:id=&quot;@+id/rotate&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;rotate&quot; android:onClick=&quot;rotate&quot;/&gt; &lt;Button android:id=&quot;@+id/scale&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;scale&quot; android:onClick=&quot;scale&quot;/&gt; &lt;Button android:id=&quot;@+id/translate&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;translate&quot; android:onClick=&quot;translate&quot;/&gt; &lt;/LinearLayout&gt;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt; TweenAnimationActivity.java 12345678910111213141516171819202122232425262728293031public class TweenAnimationActivity extends AppCompatActivity &#123; View image; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_tween_animation); image = findViewById(R.id.image); &#125; public void rotate(View view) &#123; Animation animation = AnimationUtils.loadAnimation(TweenAnimationActivity.this,R.anim.rotate); image.startAnimation(animation); &#125; public void alpha(View view) &#123; Animation animation = AnimationUtils.loadAnimation(TweenAnimationActivity.this,R.anim.alpha); image.startAnimation(animation); &#125; public void scale(View view) &#123; Animation animation = AnimationUtils.loadAnimation(TweenAnimationActivity.this,R.anim.scale); image.startAnimation(animation); &#125; public void translate(View view) &#123; Animation animation = AnimationUtils.loadAnimation(TweenAnimationActivity.this,R.anim.translate); image.startAnimation(animation); &#125;&#125; 属性动画倒计时效果:activity_value_animation.xml 1234567891011121314151617181920212223&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:id=&quot;@+id/value_animation&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;.ValueAnimationActivity&quot;&gt; &lt;TextView android:id=&quot;@+id/timer&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;80dp&quot; android:background=&quot;#03A9F4&quot; android:paddingLeft=&quot;40dp&quot; android:gravity=&quot;left&quot; android:text=&quot;倒计时:0.0&quot; android:textSize=&quot;50sp&quot; app:layout_constraintBottom_toBottomOf=&quot;parent&quot; app:layout_constraintEnd_toEndOf=&quot;parent&quot; app:layout_constraintStart_toStartOf=&quot;parent&quot; app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt; 1234567891011121314151617181920212223242526public class ValueAnimationActivity extends AppCompatActivity &#123; TextView textView; ValueAnimator valueAnimator; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_value_animation); textView = findViewById(R.id.timer); valueAnimator = ValueAnimator.ofFloat(100f,0f); valueAnimator.setDuration(10000); valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator animation) &#123; Float animatedValue =(Float) animation.getAnimatedValue(); textView.setText(&quot;倒计时:&quot;+ animatedValue.toString()); &#125; &#125;); textView.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; valueAnimator.start(); &#125; &#125;); &#125;&#125; 设置倒计时并改变透明度12345678910111213141516171819202122public class ValueAnimationActivity extends AppCompatActivity &#123; TextView textView; ValueAnimator valueAnimator; ObjectAnimator objectAnimator; @Override protected void onCreate(Bundle savedInstanceState) &#123; //... objectAnimator = ObjectAnimator.ofFloat(textView, &quot;alpha&quot;,1f,0f); objectAnimator.setDuration(2000); textView.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; valueAnimator.start(); objectAnimator.start(); &#125; &#125;); &#125;&#125; ObjectAnimator监听事件 方法 说明 onAnimationCancel 当动画取消时 onAnimationEnd 当动画结束时 onAnimationRepeat 当动画重复时 onAnimationStart 当动画开始时 onAnimationPause 当动画暂停时 onAnimationResume 当动画被消费是 使用AnimatorListener监听器的方式使用AnimatorListener监听器的方式需要六个方法全部重写 使用适配器的方式使用适配器的方式可以重写六个中的一个,AnimatorListenerAdapter是实现了AnimatorListener的抽象类 12345678910111213141516171819202122232425262728293031objectAnimator.addListener(new AnimatorListenerAdapter() &#123; @Override public void onAnimationCancel(Animator animation) &#123; super.onAnimationCancel(animation); &#125; @Override public void onAnimationEnd(Animator animation) &#123; super.onAnimationEnd(animation); &#125; @Override public void onAnimationRepeat(Animator animation) &#123; super.onAnimationRepeat(animation); &#125; @Override public void onAnimationStart(Animator animation) &#123; super.onAnimationStart(animation); &#125; @Override public void onAnimationPause(Animator animation) &#123; super.onAnimationPause(animation); &#125; @Override public void onAnimationResume(Animator animation) &#123; super.onAnimationResume(animation); &#125;&#125;);","categories":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 动画","slug":"Android/Android-动画","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E5%8A%A8%E7%94%BB/"},{"name":"效果","slug":"效果","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E6%95%88%E6%9E%9C/"},{"name":"倒计时demo","slug":"效果/倒计时demo","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E6%95%88%E6%9E%9C/%E5%80%92%E8%AE%A1%E6%97%B6demo/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 动画","slug":"Android/Android-动画","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E5%8A%A8%E7%94%BB/"},{"name":"效果","slug":"效果","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E6%95%88%E6%9E%9C/"},{"name":"倒计时demo","slug":"效果/倒计时demo","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E6%95%88%E6%9E%9C/%E5%80%92%E8%AE%A1%E6%97%B6demo/"}]},{"title":"RecyclerView","slug":"RecyclerView","date":"2022-05-03T11:34:46.463Z","updated":"2022-05-06T11:59:04.539Z","comments":true,"path":"2022/05/03/RecyclerView/","link":"","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/2022/05/03/RecyclerView/","excerpt":"1.RecyclerView","text":"1.RecyclerView RecyclerView布局资源文件activity_main.xml文件 1234567891011121314&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;.MainActivity&quot; android:orientation=&quot;vertical&quot;&gt; &lt;include layout=&quot;@layout/search&quot;/&gt; &lt;androidx.recyclerview.widget.RecyclerView android:id=&quot;@+id/rv&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; /&gt;&lt;/LinearLayout&gt; recycler_view_item.xml文件 1234567891011&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;TextView android:id=&quot;@+id/tv&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:textSize=&quot;30sp&quot; /&gt;&lt;/LinearLayout&gt; search.xml文件 1234567891011121314151617181920212223242526&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;100dp&quot;&gt; &lt;ImageView android:id=&quot;@+id/searchIcon&quot; android:layout_width=&quot;60dp&quot; android:layout_height=&quot;60dp&quot; app:srcCompat=&quot;?android:attr/actionModeWebSearchDrawable&quot; /&gt; &lt;EditText android:id=&quot;@+id/searchText&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_toRightOf=&quot;@id/searchIcon&quot; android:layout_alignBottom=&quot;@id/searchIcon&quot; android:layout_alignTop=&quot;@id/searchIcon&quot; android:background=&quot;@color/purple_500&quot; android:singleLine=&quot;true&quot; android:hint=&quot;请输入生物&quot; android:textSize=&quot;30sp&quot; /&gt;&lt;/RelativeLayout&gt; Java代码Bean.java 12345678910111213141516public class Bean &#123; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; String name; public Bean(String name) &#123; this.name = name; &#125;&#125; MainActivity.java 123456789101112131415161718192021222324252627282930public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); RecyclerView recyclerView = findViewById(R.id.rv); LinearLayoutManager linearLayoutManager = new LinearLayoutManager(this); recyclerView.setLayoutManager(linearLayoutManager); MyAdapter myAdapter = new MyAdapter(getDate(), this); recyclerView.setAdapter(myAdapter);// myAdapter.setRecyclerItemItemClickListener(new MyAdapter.OnRecyclerItemClickListener() &#123;// @Override// public void onItemClick(View v, int position) &#123;// Log.v(&quot;ddd&quot;,((TextView)v).getText().toString()+position);// &#125;// &#125;); &#125; List&lt;Bean&gt; getDate() &#123; List&lt;Bean&gt; data = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; 100; i++) &#123; Bean bean = new Bean(&quot;昆虫名字&quot; + i); data.add(bean); &#125; return data; &#125;&#125; 自定义Adapter123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354public class MyAdapter extends RecyclerView.Adapter&lt;MyAdapter.MyHolder&gt; &#123; private List&lt;Bean&gt; data; private Context context; public MyAdapter(List&lt;Bean&gt; data, Context context) &#123; this.data = data; this.context = context; &#125; @NonNull @Override public MyHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) &#123; View itemView = LayoutInflater.from(context).inflate(R.layout.recycler_view_item,null); return new MyHolder(itemView); &#125; @Override public void onBindViewHolder(@NonNull MyHolder holder, int position) &#123; holder.textView.setText(data.get(position).getName()); &#125; @Override public int getItemCount() &#123; return data == null ? 0 : data.size(); &#125; public class MyHolder extends RecyclerView.ViewHolder &#123; TextView textView; public MyHolder(@NonNull View itemView) &#123; super(itemView); textView = itemView.findViewById(R.id.tv);// textView.setOnClickListener(new View.OnClickListener() &#123;// @Override// public void onClick(View v) &#123;// if(itemClickListener != null)&#123;// itemClickListener.onItemClick(v,getAdapterPosition());// &#125;// &#125;/ &#125;); &#125; &#125;// private OnRecyclerItemClickListener itemClickListener;//// public void setRecyclerItemItemClickListener(OnRecyclerItemClickListener listener)&#123;// itemClickListener = listener;// &#125;//// public interface OnRecyclerItemClickListener&#123;// void onItemClick(View v,int position);// &#125;&#125; 设置每个Item的监听事件Adapter提供监听接口123456789private OnRecyclerItemClickListener itemClickListener;public void setRecyclerItemItemClickListener(OnRecyclerItemClickListener listener)&#123; itemClickListener = listener;&#125;public interface OnRecyclerItemClickListener&#123; void onItemClick(View v,int position);&#125; 为每个item使用监听器的回调方法12345678textView.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; if(itemClickListener != null)&#123; itemClickListener.onItemClick(v,getAdapterPosition()); &#125; &#125;&#125;); 为item设置监听器123456myAdapter.setRecyclerItemItemClickListener(new MyAdapter.OnRecyclerItemClickListener() &#123; @Override public void onItemClick(View v, int position) &#123; Log.v(&quot;ddd&quot;,((TextView)v).getText().toString()+position); &#125;&#125;);","categories":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 控件","slug":"Android/Android-控件","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%8E%A7%E4%BB%B6/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 控件","slug":"Android/Android-控件","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%8E%A7%E4%BB%B6/"}]},{"title":"ListView","slug":"ListView","date":"2022-05-03T11:34:46.447Z","updated":"2022-05-06T11:59:04.479Z","comments":true,"path":"2022/05/03/ListView/","link":"","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/2022/05/03/ListView/","excerpt":"1.ListView 2.常见问题","text":"1.ListView 2.常见问题 ListView布局资源文件activity_main.xml文件 1234567891011121314&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;.MainActivity&quot; android:orientation=&quot;vertical&quot;&gt; &lt;include layout=&quot;@layout/search&quot;/&gt; &lt;ListView android:id=&quot;@+id/lv&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; /&gt;&lt;/LinearLayout&gt; list_item.xml文件 123456789101112&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;TextView android:id=&quot;@+id/tv&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:textSize=&quot;30sp&quot; /&gt;&lt;/LinearLayout&gt; search.xml文件 1234567891011121314151617181920212223242526&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;100dp&quot;&gt; &lt;ImageView android:id=&quot;@+id/searchIcon&quot; android:layout_width=&quot;60dp&quot; android:layout_height=&quot;60dp&quot; app:srcCompat=&quot;?android:attr/actionModeWebSearchDrawable&quot; /&gt; &lt;EditText android:id=&quot;@+id/searchText&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_toRightOf=&quot;@id/searchIcon&quot; android:layout_alignBottom=&quot;@id/searchIcon&quot; android:layout_alignTop=&quot;@id/searchIcon&quot; android:background=&quot;@color/purple_500&quot; android:singleLine=&quot;true&quot; android:hint=&quot;请输入生物&quot; android:textSize=&quot;30sp&quot; /&gt;&lt;/RelativeLayout&gt; Java代码Bean.java 12345678910111213141516public class Bean &#123; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; String name; public Bean(String name) &#123; this.name = name; &#125;&#125; MainActivity.java 12345678910111213141516171819202122public class MainActivity extends AppCompatActivity &#123; private List&lt;Bean&gt; data; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); data = getDate(); ListView listView = findViewById(R.id.lv); listView.setAdapter(new MyAdapter(data,this)); &#125; List&lt;Bean&gt; getDate()&#123; List&lt;Bean&gt; data = new ArrayList&lt;&gt;(); for(int i = 0;i &lt; 100;i++)&#123; Bean bean = new Bean(&quot;昆虫名字&quot;+i); data.add(bean); &#125; return data; &#125;&#125; 使用一般方式创建ListView的item1234567891011121314151617181920212223242526272829303132333435363738public class MyAdapter extends BaseAdapter &#123; private List&lt;Bean&gt; data; private Context context; public MyAdapter(List&lt;Bean&gt; data, Context context) &#123; this.data = data; this.context = context; &#125; @Override public int getCount() &#123; return data.size(); &#125; @Override public Object getItem(int position) &#123; return null; &#125; @Override public long getItemId(int position) &#123; return position; &#125; @Override public View getView(int position, View convertView, ViewGroup parent) &#123; if (convertView == null) &#123; convertView = LayoutInflater.from(context).inflate(R.layout.list_item, parent, false); &#125; TextView textView = (TextView) convertView.findViewById(R.id.tv); textView.setText(data.get(position).getName()); return convertView; &#125;&#125; 使用ViewHolder的方式创建ListView的itemMyAdapter.java 12345678910111213141516171819202122232425262728293031323334353637383940414243444546public class MyAdapter extends BaseAdapter &#123; private List&lt;Bean&gt; data; private Context context; public MyAdapter(List&lt;Bean&gt; data, Context context) &#123; this.data = data; this.context = context; &#125; @Override public int getCount() &#123; return data.size(); &#125; @Override public Object getItem(int position) &#123; return null; &#125; @Override public long getItemId(int position) &#123; return position; &#125; @Override public View getView(int position, View convertView, ViewGroup parent) &#123; MyViewHolder myViewHolder; if (convertView == null) &#123; convertView = LayoutInflater.from(context).inflate(R.layout.list_item, parent, false); TextView textView = (TextView) convertView.findViewById(R.id.tv); myViewHolder = new MyViewHolder(); myViewHolder.view = textView; convertView.setTag(myViewHolder); &#125; else &#123; myViewHolder = (MyViewHolder) convertView.getTag(); &#125; myViewHolder.view.setText(data.get(position).getName()); return convertView; &#125; class MyViewHolder &#123; TextView view; &#125;&#125; 设置每个Item的监听事件1234567listView.setOnItemClickListener(new AdapterView.OnItemClickListener() &#123; @Override public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) &#123; TextView viewById = view.findViewById(R.id.tv); Log.v(&quot;dddd&quot;,viewById.getText().toString()); &#125;&#125;); 常见问题使用listview时，设置textView的值后textView的内容显示无效，因为使用的textView都是同一个对象，而ListView里面的每一item都是不同的对象，当设置textView的值时，实际上改变的是同一个textView里面的内容，而未被赋值的新的textView会被默认方式赋值 123456789101112131415161718192021222324252627282930313233public View getView(int position, View convertView, ViewGroup parent) &#123; if (convertView == null) &#123; convertView = LayoutInflater.from(context).inflate(R.layout.list_item, parent, false); textView = (TextView)convertView.findViewById(R.id.tv); &#125; String text = data.get(position).getName(); textView.setText(text); Log.v(&quot;dddd&quot;,textView.hashCode()+&quot;:&quot;+(String) textView.getText()); TextView view = (TextView)convertView.findViewById(R.id.tv); Log.v(&quot;ddddy&quot;,textView.hashCode()+&quot;:&quot;+ (String) view.getText()); return convertView; &#125;/*输出:2022-05-03 15:32:32.907 7372-7372/com.example.listview V/dddd: 262667592:昆虫名字192022-05-03 15:32:32.907 7372-7372/com.example.listview V/ddddy: 262667592:昆虫名字192022-05-03 15:32:32.936 7372-7372/com.example.listview V/dddd: 262667592:昆虫名字202022-05-03 15:32:32.936 7372-7372/com.example.listview V/ddddy: 262667592:昆虫名字12022-05-03 15:32:32.953 7372-7372/com.example.listview V/dddd: 262667592:昆虫名字212022-05-03 15:32:32.953 7372-7372/com.example.listview V/ddddy: 262667592:昆虫名字22022-05-03 15:32:32.970 7372-7372/com.example.listview V/dddd: 262667592:昆虫名字222022-05-03 15:32:32.970 7372-7372/com.example.listview V/ddddy: 262667592:昆虫名字32022-05-03 15:32:32.988 7372-7372/com.example.listview V/dddd: 262667592:昆虫名字232022-05-03 15:32:32.988 7372-7372/com.example.listview V/ddddy: 262667592:昆虫名字42022-05-03 15:32:33.004 7372-7372/com.example.listview V/dddd: 262667592:昆虫名字242022-05-03 15:32:33.004 7372-7372/com.example.listview V/ddddy: 262667592:昆虫名字52022-05-03 15:32:33.020 7372-7372/com.example.listview V/dddd: 262667592:昆虫名字252022-05-03 15:32:33.020 7372-7372/com.example.listview V/ddddy: 262667592:昆虫名字02022-05-03 15:32:33.069 7372-7372/com.example.listview V/dddd: 262667592:昆虫名字262022-05-03 15:32:33.069 7372-7372/com.example.listview V/ddddy: 262667592:昆虫名字6*/","categories":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 控件","slug":"Android/Android-控件","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%8E%A7%E4%BB%B6/"},{"name":"常见问题","slug":"常见问题","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"},{"name":"已解决","slug":"常见问题/已解决","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%B7%B2%E8%A7%A3%E5%86%B3/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 控件","slug":"Android/Android-控件","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%8E%A7%E4%BB%B6/"},{"name":"常见问题","slug":"常见问题","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"},{"name":"已解决","slug":"常见问题/已解决","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%B7%B2%E8%A7%A3%E5%86%B3/"}]},{"title":"TableLayout","slug":"TableLayout","date":"2022-05-02T12:33:05.143Z","updated":"2022-05-06T11:59:04.571Z","comments":true,"path":"2022/05/02/TableLayout/","link":"","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/2022/05/02/TableLayout/","excerpt":"1.TableLayout属性 2.TableLayout布局","text":"1.TableLayout属性 2.TableLayout布局 TableLayout属性对于父控件 属性 说明 collapseColumns 隐藏该列（可以是多列） shrinkColumns 收缩该列（可以是多列） stretchColumns 拉伸该列（可以是多列） 对于子控件 属性 说明 TableLayout布局正常123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;TableLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;TableRow&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮0&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮1&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮2&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮3&quot; /&gt; &lt;/TableRow&gt; &lt;TableRow&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮4&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮5&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮6&quot; /&gt; &lt;/TableRow&gt;&lt;/TableLayout&gt; 设置拉伸列仅当TableRow还有多余的空间时才有用 12345678910111213141516171819202122232425262728&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;TableLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:stretchColumns=&quot;1,2&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;TableRow&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮0&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮1&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮2&quot; /&gt; &lt;/TableRow&gt;&lt;/TableLayout&gt; 设置收缩列仅当一个TableRow显示不下所有单元格时才有用 12345678910111213141516171819202122232425262728293031323334353637&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;TableLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:shrinkColumns=&quot;1&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;TableRow&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮0&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮1&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮2&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮3&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮4&quot; /&gt; &lt;/TableRow&gt;&lt;/TableLayout&gt; 设置隐藏列1234567891011121314151617181920212223242526272829303132&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;TableLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:collapseColumns=&quot;0,2&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;TableRow&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮0&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮1&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮2&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮3&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮4&quot; /&gt; &lt;/TableRow&gt;&lt;/TableLayout&gt; 跨列显示与从第几列显示只有行数大于1时有效 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;TableLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;.MainActivity&quot;&gt;&lt;!-- 第二列跨两列--&gt; &lt;TableRow&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮0&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_span=&quot;2&quot; android:text=&quot;按钮1&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮2&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮3&quot; /&gt; &lt;/TableRow&gt;&lt;!--从第二列开始显示--&gt; &lt;TableRow&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_column=&quot;1&quot; android:text=&quot;按钮0&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮1&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮2&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮3&quot; /&gt; &lt;/TableRow&gt;&lt;/TableLayout&gt;","categories":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 布局","slug":"Android/Android-布局","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E5%B8%83%E5%B1%80/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 布局","slug":"Android/Android-布局","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E5%B8%83%E5%B1%80/"}]},{"title":"RelativeLaout","slug":"RelativeLayout","date":"2022-05-02T12:33:05.137Z","updated":"2022-05-06T11:59:04.546Z","comments":true,"path":"2022/05/02/RelativeLayout/","link":"","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/2022/05/02/RelativeLayout/","excerpt":"1.RelativeLayout属性 2.RelativeLayout布局","text":"1.RelativeLayout属性 2.RelativeLayout布局 RelativeLayout属性根据父容器定位的属性 属性 说明 layout_alignParentLeft 左对齐 layout_alignParentRight 右对齐 layout_alignParentTop 顶部对齐 layout_alignParentBottom 底部对齐 layout_centerHorizontal 水平居中 layout_centerVertical 垂直居中 layout_centerInParent 中间位置 根据兄弟组件定位的属性 属性 说明 layout_toLeftOf 放置于参考组件的左边 layout_toRightOf 放置于参考组件的右边 layout_above 放置于参考组件的上方 layout_below 放置于参考组件的下方 layout_alignTop 对齐参考组件的上边界 layout_alignBottom 对齐参考组件的下边界 layout_alignLeft 对齐参考组件的左边界 layout_alignRight 对齐参考组件的右边界 其他属性 属性 说明 layout_margin 相对于父容器上下左右的边距 layout_marginLeft 相对于父容器左边的边距 layout_marginTop 相对于父容器上边的边距 layout_marginRight 相对于父容器右边的边距 layout_marginBottom 相对于父容器下边的边距 layout_marginStart 相对于父容器开始位置的边距 layout_marginEnd 相对于父容器结束位置的边距（右边） layout_marginHorizontal 相对于父容器左右边界的边距(相当于同时指定layout_marginStart和layout_marginEnd的值为相同的的值) layout_marginVertical 相对于父容器左右边界的边距(相当于同时指定layout_marginTop和layout_marginBottom的值为相同的的值) padding 设置子容器与自身上下左右到边界的边距 paddingHorizontal 设置子容器与自身左右到边界的边距 paddingVertical 设置子容器与自身上下到边界的边距 paddingLeft 设置子容器与自身左边到边界的边距 paddingTop 设置子容器与自身上边到边界的边距 paddingRight 设置子容器与自身右边到边界的边距 paddingBottom 设置子容器与自身下边到边界的边距 paddingStart 同paddingRight paddingEnd 同paddingRight margin是相对于父容器的，padding是相对于自己内部的 RelativeLayout布局123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;#FF0000&quot; tools:context=&quot;.MainActivity&quot;&gt;&lt;!-- 绿色，相对父容器最开始位置，即右上角,相当于Left--&gt; &lt;RelativeLayout android:layout_alignParentStart=&quot;true&quot; android:layout_width=&quot;100dp&quot; android:layout_height=&quot;100dp&quot; android:background=&quot;#00FF00&quot;/&gt;&lt;!-- 黄色，相对父容器最开始位置的最右边，相当于Right--&gt; &lt;RelativeLayout android:layout_alignParentEnd=&quot;true&quot; android:layout_width=&quot;100dp&quot; android:layout_height=&quot;100dp&quot; android:background=&quot;#FFFF00&quot;/&gt;&lt;!--浅蓝色,相对于父容器最开始的位置的最下面--&gt; &lt;RelativeLayout android:layout_width=&quot;100dp&quot; android:layout_height=&quot;100dp&quot; android:layout_alignParentBottom=&quot;true&quot; android:background=&quot;#00FFFF&quot; /&gt; &lt;!-- 黑色，相对于父容器最开始位置，水平居中--&gt; &lt;RelativeLayout android:layout_centerHorizontal=&quot;true&quot; android:layout_width=&quot;100dp&quot; android:layout_height=&quot;100dp&quot; android:background=&quot;#000000&quot;/&gt; &lt;!-- 白色，相对于父容器最开始位置，垂直居中--&gt; &lt;RelativeLayout android:layout_centerVertical=&quot;true&quot; android:layout_width=&quot;100dp&quot; android:layout_height=&quot;100dp&quot; android:background=&quot;#FFFFFF&quot;/&gt; &lt;!-- 蓝色，相对于父容器整体居中--&gt; &lt;RelativeLayout android:layout_centerInParent=&quot;true&quot; android:layout_width=&quot;100dp&quot; android:layout_height=&quot;100dp&quot; android:background=&quot;#0000FF&quot;/&gt; &lt;!-- 粉色,相对于父容器最开始位置最右边+最下边--&gt; &lt;RelativeLayout android:layout_alignParentBottom=&quot;true&quot; android:layout_alignParentRight=&quot;true&quot; android:layout_width=&quot;100dp&quot; android:layout_height=&quot;100dp&quot; android:background=&quot;#FF00FF&quot;/&gt;&lt;/RelativeLayout&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;#FF0000&quot; tools:context=&quot;.MainActivity&quot; &gt;&lt;!--绿色--&gt; &lt;RelativeLayout android:layout_width=&quot;100dp&quot; android:layout_height=&quot;100dp&quot; android:layout_marginHorizontal=&quot;10dp&quot; android:background=&quot;#00FF00&quot; /&gt;&lt;!--黄色--&gt;&lt;!-- 因为左右的间距都为200dp，中间剩余的间距已经不足100dp,所以显示不下--&gt; &lt;RelativeLayout android:layout_width=&quot;100dp&quot; android:layout_height=&quot;100dp&quot; android:layout_marginHorizontal=&quot;200dp&quot; android:background=&quot;#FFFF00&quot; /&gt;&lt;!-- 粉色--&gt; &lt;RelativeLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;100dp&quot; android:layout_marginVertical=&quot;100dp&quot; android:background=&quot;#FF00FF&quot; /&gt;&lt;!-- 蓝色--&gt; &lt;RelativeLayout android:id=&quot;@+id/blue&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;100dp&quot; android:layout_marginVertical=&quot;200dp&quot; android:background=&quot;#0000FF&quot; /&gt;&lt;!-- 浅蓝色,显示在蓝色的下方，引用兄弟布局的id--&gt; &lt;RelativeLayout android:layout_below=&quot;@id/blue&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;100dp&quot; android:background=&quot;#00FFFF&quot; /&gt;&lt;/RelativeLayout&gt;","categories":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 布局","slug":"Android/Android-布局","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E5%B8%83%E5%B1%80/"},{"name":"margin","slug":"Android/Android-布局/margin","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E5%B8%83%E5%B1%80/margin/"},{"name":"padding","slug":"Android/Android-布局/padding","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E5%B8%83%E5%B1%80/padding/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 布局","slug":"Android/Android-布局","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E5%B8%83%E5%B1%80/"},{"name":"margin","slug":"Android/Android-布局/margin","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E5%B8%83%E5%B1%80/margin/"},{"name":"padding","slug":"Android/Android-布局/padding","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E5%B8%83%E5%B1%80/padding/"}]},{"title":"GridLayout","slug":"GridLayout","date":"2022-05-02T12:33:05.101Z","updated":"2022-05-06T11:59:04.446Z","comments":true,"path":"2022/05/02/GridLayout/","link":"","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/2022/05/02/GridLayout/","excerpt":"1.GridLayout属性 2.GridLayout布局","text":"1.GridLayout属性 2.GridLayout布局 GridLayout属性GridLayout的属性 属性 说明 orientation 设置排列方向 columnCount 设置列数，超过的部分换行显示 rowCount 设置行数，超过的部分换列显示 子控件的属性 属性 说明 layout_column 显示在第几列 layout_row 显示在第几行 layout_rowSpan 横向跨几行 layout_columnSpan 横向跨几列 layout_columnWeight 横向剩余空间的权重 layout_gravity 在网格中的显示位置 layout_rowWeight 纵向剩余空间的权重 GridLayout布局设置纵向排列，排列3行12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;GridLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:rowCount=&quot;3&quot; android:orientation=&quot;vertical&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮1&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮2&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮3&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮4&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮5&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮6&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮7&quot; /&gt;&lt;/GridLayout&gt; 设置横向排列，排列2列12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;GridLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:columnCount=&quot;2&quot; android:orientation=&quot;horizontal&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮1&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮2&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮3&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮4&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮5&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮6&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮7&quot; /&gt;&lt;/GridLayout&gt; 子控件属性的使用12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;GridLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;!-- 使用layout_rowWeight确定纵向剩余空间权重--&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_row=&quot;1&quot; android:layout_column=&quot;0&quot; android:layout_columnWeight=&quot;1&quot; android:text=&quot;按钮1&quot; /&gt; &lt;!-- 使用layout_rowWeight确定纵向剩余空间权重--&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_row=&quot;0&quot; android:layout_column=&quot;0&quot; android:layout_columnWeight=&quot;1&quot; android:text=&quot;按钮2&quot; /&gt; &lt;!--使用layout_columnSpan，设置跨两列--&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_row=&quot;0&quot; android:layout_column=&quot;1&quot; android:layout_columnSpan=&quot;2&quot; android:layout_gravity=&quot;fill&quot; android:text=&quot;按钮3&quot; /&gt; &lt;!-- 使用layout_rowWeight确定纵向剩余空间权重--&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_row=&quot;1&quot; android:layout_rowWeight=&quot;1&quot; android:layout_column=&quot;1&quot; android:text=&quot;按钮4&quot; /&gt; &lt;!--使用layout_columnWeight确定横向剩余空间权重--&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_columnWeight=&quot;1&quot; android:text=&quot;按钮5&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_row=&quot;0&quot; android:layout_column=&quot;3&quot; android:text=&quot;按钮6&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_row=&quot;2&quot; android:layout_column=&quot;3&quot; android:text=&quot;按钮7&quot; /&gt;&lt;/GridLayout&gt;","categories":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 布局","slug":"Android/Android-布局","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E5%B8%83%E5%B1%80/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 布局","slug":"Android/Android-布局","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E5%B8%83%E5%B1%80/"}]},{"title":"FrameLayout","slug":"FrameLayout","date":"2022-05-02T12:33:05.099Z","updated":"2022-05-06T11:59:04.430Z","comments":true,"path":"2022/05/02/FrameLayout/","link":"","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/2022/05/02/FrameLayout/","excerpt":"1.FrameLayout布局 2.FrameLayout前景色设置","text":"1.FrameLayout布局 2.FrameLayout前景色设置 FrameLayout布局123456789101112131415161718192021222324&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;#FF0000&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;FrameLayout android:layout_width=&quot;400dp&quot; android:layout_height=&quot;400dp&quot; android:background=&quot;#000000&quot;/&gt; &lt;FrameLayout android:layout_width=&quot;300dp&quot; android:layout_height=&quot;300dp&quot; android:background=&quot;#FFFF00&quot;/&gt; &lt;FrameLayout android:layout_width=&quot;200dp&quot; android:layout_height=&quot;200dp&quot; android:background=&quot;#0000FF&quot;/&gt;&lt;/FrameLayout&gt; FrameLayout前景色设置1234567891011121314151617181920212223242526&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;#FF0000&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;FrameLayout android:layout_width=&quot;400dp&quot; android:layout_height=&quot;400dp&quot; android:background=&quot;#000000&quot; android:foreground=&quot;@drawable/ic_launcher_background&quot; android:foregroundGravity=&quot;right|bottom&quot;/&gt; &lt;FrameLayout android:layout_width=&quot;300dp&quot; android:layout_height=&quot;300dp&quot; android:background=&quot;#FFFF00&quot;/&gt; &lt;FrameLayout android:layout_width=&quot;200dp&quot; android:layout_height=&quot;200dp&quot; android:background=&quot;#0000FF&quot;/&gt;&lt;/FrameLayout&gt;","categories":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 布局","slug":"Android/Android-布局","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E5%B8%83%E5%B1%80/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 布局","slug":"Android/Android-布局","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E5%B8%83%E5%B1%80/"}]},{"title":"ConstrainLayout","slug":"ConstrainLayout","date":"2022-05-02T12:33:05.086Z","updated":"2022-05-06T11:59:04.407Z","comments":true,"path":"2022/05/02/ConstrainLayout/","link":"","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/2022/05/02/ConstrainLayout/","excerpt":"","text":"视频 ConstrainLayout直接使用布局设计器拖动更方便，无需记属性","categories":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 布局","slug":"Android/Android-布局","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E5%B8%83%E5%B1%80/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 布局","slug":"Android/Android-布局","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E5%B8%83%E5%B1%80/"}]},{"title":"PopupWindow","slug":"PopupWindow","date":"2022-05-01T12:38:19.780Z","updated":"2022-05-06T11:59:04.517Z","comments":true,"path":"2022/05/01/PopupWindow/","link":"","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/2022/05/01/PopupWindow/","excerpt":"1.设置PopupWindow属性 2.PopupWindow的使用","text":"1.设置PopupWindow属性 2.PopupWindow的使用 设置PopupWindow属性 方法 说明 setContentView(View contentView) 设置PopupWindow:显示的View showAsDropDown(View anchor) 相对某个控件的位置（正左下方），无偏移 setFocusable(boolean focusable) 设置是否获取焦点 setBackgroundDrawable(Drawable background) 设置背景 dismiss() 关闭弹窗 setAnimationStyle(int animationStyle) 设置加载动画 setTouchable(boolean touchable) 设置PopupWindow可以触摸 setOutsideTouchable(boolean touchable) 设置PopupWindow外面的可以触摸 代码实现在activity_main.xml中的代码 1234567891011121314151617&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;显示popupWindow&quot; android:onClick=&quot;showPopupWindow&quot; /&gt;&lt;/LinearLayout&gt; 在popup_view.xml中的代码 1234567891011121314151617181920&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;@drawable/ic_launcher_background&quot; android:orientation=&quot;vertical&quot;&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;北京&quot; android:onClick=&quot;beiJin&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;上海&quot; android:onClick=&quot;shangHai&quot; /&gt;&lt;/LinearLayout&gt; 在MainActivity.java中的代码 12345678910111213141516171819202122232425262728293031323334353637383940414243package com.example.popupwindow;import androidx.appcompat.app.AppCompatActivity;import android.app.ActionBar;import android.os.Bundle;import android.view.View;import android.view.ViewGroup;import android.widget.PopupWindow;public class MainActivity extends AppCompatActivity &#123; PopupWindow popupWindow; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); &#125; public void beiJin(View view) &#123; System.out.println(&quot;北京被点击了&quot;); //点击后关闭窗口 popupWindow.dismiss(); &#125; public void shangHai(View view) &#123; System.out.println(&quot;上海被点击了&quot;); //点击后关闭窗口 popupWindow.dismiss(); &#125; public void showPopupWindow(View view) &#123; View layoutPopupWindow = getLayoutInflater().inflate(R.layout.popup_view,null); //第一个参数为layout布局，为弹窗的布局资源，第二三个为设置弹窗大小，第四个为点击点击PopupWindow外的区域可以自动收起弹窗 popupWindow = new PopupWindow(layoutPopupWindow, ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT,true); //设置相对于显示在某个View的下方，该方法有重载，可设置p popupWindow.showAsDropDown(view); &#125;&#125; 实现效果","categories":[],"tags":[],"keywords":[]},{"title":"JavaScript and NodeJs","slug":"Nodejs","date":"2022-05-01T09:36:31.275Z","updated":"2022-05-06T11:59:04.720Z","comments":true,"path":"2022/05/01/Nodejs/","link":"","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/2022/05/01/Nodejs/","excerpt":"本文介绍了Node.js的安装与配置方法,javascript的部分新增语法特性,收录了javascript和Node.js学习网站和前端框架网站,收集了学习过程中遇到的问题","text":"本文介绍了Node.js的安装与配置方法,javascript的部分新增语法特性,收录了javascript和Node.js学习网站和前端框架网站,收集了学习过程中遇到的问题 链接 阮一峰Javascript标准参考教程 前端工坊 javascript和node.js框架库 MDN Web Docs javascript 权威教程 Element-ui 前端Ui组件库 Bootstrap 前端Ui组件库 W3C中文官网 Node.js中文社区 Node.js安装与配置安装从官网下载Node.js node官网设置安装路径一直点击next就可以了 配置默认情况下，npm下载的包都存放在C:\\Users\\YOU\\AppData\\Roaming\\npm\\node_modules目录的下缓存放在C:\\Users\\YOU\\AppData\\Local\\npm-cache下,可使用npm config list -l查看详情信息 更改默认缓存和包的位置，设置为自定义路径123npm config set prefix &quot;...\\NodeJs\\npm_gloabal_config\\npm&quot;npm config set cache &quot;...\\NodeJs\\npm_gloabal_config\\npm-cache&quot;将该路径加入到环境变量1...\\NodeJs\\npm_gloabal_config\\npm\\node_modules Nodejs权限设置当nodejs安装在其他盘时，无法使用 npm install命令，需要对node的安装目录进行权限设置，需要赋予用户对该文件的完全控制、修改等权限 安装国内淘宝cnpm1npm install -g cnpm --registry=https://registry.npm.taobao.org Node.js学习指南 中文官网入门教程新手入门目录 词汇结构 表达式 数据类型 类 变量 函数 this 箭头函数 循环 作用域 数组 模板字面量 分号 严格模式 ECMAScript 6、2016、2017高手进阶须知 异步编程与回调 定时器 Promise Async 与 Await 闭包 事件循环 Node.js介绍 Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine. ——node.js官网 Node.js是基于chrome’s V8 JavaScript 引擎的Javascript运行时环境 Node.js和浏览器的区别 Node.js = EcmaScript + API 浏览器 = EcmaScript + BOM + DOM 安装@vue/cli@3.12.11npm i @vue/cli@3.12.1 -g 命令行输入12vue ui运行失败，将@vue下的cli文件拷贝到\\@vue\\cli\\node_modules\\@vue目录下即可 虽然很让包重复了，但能有效解决问题 导致运行失败的原因:由于自定义包路径时将包目录设置成立\\NodeJs\\npm_gloabal_config\\npm\\node_modules导致最终生成的包下载目录为\\NodeJs\\npm_gloabal_config\\npm\\node_modules\\node_modules,vue ui启动时找到的加载目录不对，导致无法启动正确的设置应该是\\NodeJs\\npm_gloabal_config\\npm\\,当npm下载包时将自动在该目录下创建node_modules目录 ES6新增特性let和constlet用于定义变量，const用于定义常量使用let和const替代var，可以避免变量穿透和常量被修改，使用&#39;use strict&#39;启用严格检查模式，必选使用let,const,var定义变量，否则编译报错 模板字符串ES6使用字符串模板语法 1234567891011121314var person = &#123; name: &quot;张三&quot;, age: &quot;18&quot;,&#125;function introduce1(person) &#123; return &quot;我是&quot; + person.name + &quot;,我今年&quot; + person.age + &quot;岁!&quot;;&#125;//ES6模板字符串function introduce2(person) &#123; return `我是$&#123;person.name&#125;我今年$&#123;person.age&#125;岁!`;&#125;console.log(introduce(person))//输出:我是张三我今年18岁! 函数默认参数123456789//调用sum()返回NaNfunction sum(a, b) &#123; return a + b;&#125;//调用sum()返回0function sum(a = 0, b = 0) &#123; return a + b;&#125; 箭头函数1234567891011121314151617181920212223var sum = function (a, b) &#123; return a + b;&#125;var sum = (a, b) =&gt; &#123; // do something else return a + b;&#125;//当返回函数体可以直接由一行代码计算出返回结果时，可以省略returnvar sum = (a, b) =&gt; a + b;var arr = [1, 2,3, 4];//当函数体只有一个参数时，可以省略小括号var sum = arr =&gt; &#123; var result = 0; for (var i = 0; i &lt; arr.length; i++) &#123; result = result + arr[i]; &#125; return result;&#125;var arr2 = arr.map(obj =&gt; obj * 2); 对象简写123456789101112var name = &quot;张三&quot;;var age = 18;//key和value名称一样时，可以直接使用value直接表示key和valuevar person = &#123; name: name, age: age&#125;var person1 = &#123; name, age&#125; 对象解构123456789101112131415161718var person = &#123; name: &quot;张三&quot;, age: 18, height: 180, gender: &quot;男&quot;&#125;var &#123; name, age, height, gender &#125; = person;console.log(person.name, person.age, person.height, person.gender)console.log(person[&#x27;name&#x27;], person[&#x27;age&#x27;], person[&#x27;height&#x27;], person[&#x27;gender&#x27;])console.log(name, age, height, gender)/*输出：张三 18 180 男张三 18 180 男张三 18 180 男*/ 对象传播操作符1234567891011var person = &#123; name: &quot;张三&quot;, age: 18, height: 180, gender: &quot;男&quot;&#125;//将未被接受的属性全部赋值到...后的变量中var &#123; name, age, ...other &#125; = person;console.log(name, age, other.gender, other.height) Node.js APIprocessprocess是一个全局内置对象，可以在代码中的任何位置访问此对象，这个对象代表我们的node.js代码宿主的操作系统进程对象。 使用process对象可以截获进程的异常、退出等事件，也可以获取进程的当前目录、环境变量、内存占用等信息，还可以执行进程退出、工作目录切换等操作。 获取当前文件路径12var path = process.cwd()console.log(path); 切换目录1process.chdir(&quot;D:/dir&quot;); 标准输出流日志输出就是用标准输出封装12345678910console.hello = function(d)&#123; process.stdout.write(d+&#x27;\\n&#x27;);&#125;console.hello(&quot;哈哈哈&quot;) console.log = function(d)&#123; process.stdout.write(d+&#x27;\\n&#x27;);&#125;console.log(&quot;哈哈哈&quot;) 标准错误输出标准错误输出用来输入错误信息1process.stderr.write(&quot;test&quot;) 标准输入流1234567process.stdin.on(&#x27;readable&#x27;, function () &#123; var chunk = process.stdin.read(); if (chunk !== null) &#123; process.stdout.write(&#x27;data: &#x27; + chunk); &#125;&#125;); 退出1process.exit(code); 监听事件123process.on(&#x27;event name&#x27;,function(event)&#123; //do something&#125;) 编码12345process.stdin.setEncoding(编码); process.stdout.setEncoding(编码); process.stderr.setEncoding(编码); fs模块(文件操作)fs没有专门的文件移动函数，可以通过重命名文件实现文件移动 123456var fs = require(&#x27;fs&#x27;); fs.rename(oldPath,newPath,function (err) &#123; if (err) throw err; console.log(&#x27;renamed complete&#x27;);&#125;); url模块(url操作)) import和require都可以导入模块,require/exports是CommonJS的标准,而import/export是ECMAScript2015（ES6）标准 CommonJS 加载的是一个对象（即 module.exports 属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。——阮一峰 使用node.js创建一个服务12345678//使用require()函数添加导入node的modulevar http = require(&#x27;http&#x27;);http.createServer(function (request, response) &#123; response.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/plain&#x27; &#125;); response.end(&#x27;Hello World&#x27;);&#125;).listen(8081);console.log(&#x27;Server running at http://127.0.0.1:8081/&#x27;); 使用node.js连接mysql数据库 可去nmp的官网搜索下载需要的module, 下载方法参加npm官方文档,搜索结果页附带模块的具体使用教程的官方地址123456789101112131415161718//当没有mysql的module时,使用nmp install mysqlvar mysql = require(&quot;mysql&quot;)var connection = mysql.createConnection(&#123; host: &quot;localhost&quot;, user: &quot;********&quot;, password: &quot;********&quot;, database: &quot;********&quot;&#125;);connection.connect();connection.query(&#x27;select * from exam_record_2012&#x27;, function (error, results, fields) &#123; if (error) throw error; console.log(results);&#125;);connection.end();连接时会报错ER_NOT_SUPPORTED_AUTH_MODE12345code: &#x27;ER_NOT_SUPPORTED_AUTH_MODE&#x27;,errno: 1251,sqlMessage: &#x27;Client does not support authentication protocol requested by server; consider upgrading MySQL client&#x27;,sqlState: &#x27;08004&#x27;,fatal: true这是因为mysql8.0后采用caching_sha2_password加密，而node的mysql连接库采用mysql_native_password 加密方式登录mysql重新设置mysql加密方式 1234567891011mysql&gt;alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;yourpassword&#x27;;查看表是否更改mysql&gt; select host,user,plugin from user;+-----------+------------------+-----------------------+| host | user | plugin |+-----------+------------------+-----------------------+| localhost | mysql.infoschema | caching_sha2_password || localhost | mysql.session | caching_sha2_password || localhost | mysql.sys | caching_sha2_password || localhost | root | mysql_native_password |+-----------+------------------+-----------------------+ 成功修改后，重新运行连接mysql的js代码结果如下1234567891011[ RowDataPacket &#123; id: 1, uid: 123, exam_id: 123, start_time: 2021-11-05T10:57:50.000Z, submit_time: 2021-11-20T10:57:55.000Z, score: 95 &#125;]","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/JavaScript/"},{"name":"ES6","slug":"JavaScript/ES6","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/JavaScript/ES6/"},{"name":"Node","slug":"JavaScript/Node","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/JavaScript/Node/"}],"tags":[],"keywords":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/JavaScript/"},{"name":"ES6","slug":"JavaScript/ES6","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/JavaScript/ES6/"},{"name":"Node","slug":"JavaScript/Node","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/JavaScript/Node/"}]},{"title":"AlertDialog","slug":"AlertDialog","date":"2022-05-01T08:19:34.119Z","updated":"2022-05-06T11:59:04.366Z","comments":true,"path":"2022/05/01/AlertDialog/","link":"","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/2022/05/01/AlertDialog/","excerpt":"1.AlertDialog属性 2.AlertDialog的使用","text":"1.AlertDialog属性 2.AlertDialog的使用 AlertDialog属性使用AlertDialog.Builder为dialog设置属性 属性 说明 icon 图标 Message 消息 negativeButton 取消按钮 positiveButton 确认按钮 neutralButton 中立按钮（并非在中间，而是根据系统的布局决定排列位置） view dialog显示的布局 title 标题 AlertDialog的使用xml布局文件该文件名为activity_main.xml，该文件中放置了一个Button，实现功能为点击Button弹出Dialog 1234567891011121314151617&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;Button android:id=&quot;@+id/button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;显示Dialog&quot; android:onClick=&quot;show&quot;/&gt;&lt;/LinearLayout&gt; 该文件名为dialog.xml 1234567891011&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;@drawable/ic_launcher_background&quot;&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;这是Dialog布局内容&quot; /&gt;&lt;/LinearLayout&gt; java代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package com.example.alertdialog;import androidx.appcompat.app.AlertDialog;import androidx.appcompat.app.AppCompatActivity;import android.content.DialogInterface;import android.os.Bundle;import android.view.View;import android.widget.Button;public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); &#125; public void show(View view) &#123; //使用布局解析器解析dialog.xml,将其转化为View View dialog = getLayoutInflater().inflate(R.layout.dialog, null); AlertDialog.Builder alertDialog = new AlertDialog.Builder(this); alertDialog.setTitle(&quot;对话框&quot;) .setIcon(R.drawable.ic_launcher_background) .setMessage(&quot;对话框里显示内容&quot;) .setNegativeButton(&quot;取消按钮&quot;, new DialogInterface.OnClickListener() &#123; @Override public void onClick(DialogInterface dialog, int which) &#123; System.out.println(&quot;取消按钮被点击了&quot;); &#125; &#125;) .setPositiveButton(&quot;确认按钮&quot;, new DialogInterface.OnClickListener() &#123; @Override public void onClick(DialogInterface dialog, int which) &#123; System.out.println(&quot;确认按钮被点击了&quot;); &#125; &#125;) .setNeutralButton(&quot;中间&quot;, new DialogInterface.OnClickListener() &#123; @Override public void onClick(DialogInterface dialog, int which) &#123; System.out.println(&quot;中间按钮被点击了&quot;); &#125; &#125;) .setView(dialog) .create() .show(); &#125;&#125; 实现效果","categories":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 控件","slug":"Android/Android-控件","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%8E%A7%E4%BB%B6/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 控件","slug":"Android/Android-控件","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%8E%A7%E4%BB%B6/"}]},{"title":"ToolBar","slug":"ToolBar","date":"2022-05-01T07:56:17.913Z","updated":"2022-05-06T11:59:04.600Z","comments":true,"path":"2022/05/01/ToolBar/","link":"","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/2022/05/01/ToolBar/","excerpt":"","text":"ToolBar常见属性设置 设置navigationIcon可被点击 设置ToolBar的Title居中 ToolBar常见属性设置 属性 说明 android:background 背景 app:title 标题 app:subtitle 子标题 app:titleTextColor 颜色 app:subtitleTextColor 子标题颜色 app:titleMarginStart 标题距离左边开始的间距(有Icon相对于Icon,无Icon相对于父容器边界) app:navigationIcon 导航图标 app:logo 12345678910111213&lt;androidx.appcompat.widget.Toolbar android:id=&quot;@+id/toolbar1&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;?attr/actionBarSize&quot; android:background=&quot;#00FF00&quot; app:title=&quot;大标题&quot; app:subtitle=&quot;小标题&quot; app:titleTextColor=&quot;#FF0000&quot; app:subtitleTextColor=&quot;#0000FF&quot; app:titleMarginStart=&quot;100dp&quot; app:navigationIcon=&quot;@drawable/ic_baseline_arrow_back_24&quot; app:logo=&quot;@drawable/ic_launcher_background&quot; /&gt; 设置navigationIcon可被点击12345678Toolbar toolbar = findViewById(R.id.toolbar1);toolbar.setNavigationOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; System.out.println(&quot;箭头被点击了!&quot;); &#125;&#125;); 设置ToolBar的Title居中1234567891011121314&lt;androidx.appcompat.widget.Toolbar android:id=&quot;@+id/toolbar2&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;?attr/actionBarSize&quot; android:background=&quot;#00FF00&quot; app:navigationIcon=&quot;@drawable/ic_baseline_arrow_back_24&quot; &gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;标题&quot; android:layout_gravity=&quot;center&quot; /&gt; &lt;/androidx.appcompat.widget.Toolbar&gt;","categories":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 控件","slug":"Android/Android-控件","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%8E%A7%E4%BB%B6/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 控件","slug":"Android/Android-控件","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%8E%A7%E4%BB%B6/"}]},{"title":"Notification","slug":"Notification","date":"2022-04-30T09:19:43.836Z","updated":"2022-05-06T11:59:04.497Z","comments":true,"path":"2022/04/30/Notification/","link":"","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/2022/04/30/Notification/","excerpt":"创建通知服务","text":"创建通知服务 创建通知服务 方法 说明 setSmallIcon 设置通知的左上角小图标，只能是Alpha通道，不能包含RGB setColor 为图标设置颜色 setContentTitle 设置通知Title setContentText 设置通知内容 setLargeIcon 设置右侧大图标 setAutoCancel 设置点击通知弹窗后是否自动删除通知 setContentIntent 设置点击通知后跳转的界面 setPriority 设置通知的 对NotificationChannel的通知重要程度的说明 IMPORTANCE_NONE 关闭通知 IMPORTANCE_MIN 开启通知，不会弹出，但没有提示音，状态栏中无显示 IMPORTANCE_LOW 开启通知，不会弹出，不发出提示音，状态栏中显示 IMPORTANCE_DEFAULT 开启通知，不会弹出，发出提示音,状态栏中显示 IMPORTANCE_HIGH 开启通知，会弹出，发出提示音，状态栏中显示 Activity中的代码1234567891011121314151617181920212223242526272829303132333435363738394041424344public class MainActivity extends AppCompatActivity &#123; NotificationManager manager; Notification notification; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); //创建通知服务管理器 manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE); //8.0以后引入了channel，需要设置ChannelID if(Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O)&#123; NotificationChannel notificationChannel = new NotificationChannel(&quot;hello&quot;,&quot;测试&quot;,NotificationManager.IMPORTANCE_HIGH); manager.createNotificationChannel(notificationChannel); &#125; //创建跳转意图，该跳转意图跳转到IntentActivity Intent intent = new Intent(this,IntentActivity.class); PendingIntent pendingIntent = PendingIntent.getActivity(this,0,intent,0); //channelId需要和创建的NotificationChannel的Id一致 notification = new NotificationCompat.Builder(this, &quot;hello&quot;) .setSmallIcon(R.drawable.notification_icon) .setColor(Color.parseColor(&quot;#FF0000&quot;)) .setContentTitle(&quot;HelloAndroid&quot;) .setContentText(&quot;你的账户有风险&quot;) .setLargeIcon(BitmapFactory.decodeResource(getResources(),R.drawable.lake)) .setAutoCancel(true) .setContentIntent(pendingIntent ) .setPriority(NotificationCompat.PRIORITY_DEFAULT) .build(); &#125; public void sendNotification(View view) &#123; manager.notify(1, notification); &#125; public void cancelNotification(View view) &#123; //cancel的id需要和notify的id一致 manager.cancel(1); &#125;&#125; 12345678public class IntentActivity extends AppCompatActivity &#123; @Override public void onCreate(@Nullable Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_intent); &#125;&#125; 资源布局文件1234567891011121314&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;TextView android:id=&quot;@+id/textView&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;HelloIntent&quot; tools:layout_editor_absoluteX=&quot;137dp&quot; tools:layout_editor_absoluteY=&quot;395dp&quot; /&gt;&lt;/LinearLayout&gt; 123456789101112131415161718192021&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;发送通知&quot; android:onClick=&quot;sendNotification&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;取消通知&quot; android:onClick=&quot;cancelNotification&quot;/&gt;&lt;/LinearLayout&gt; 实现效果","categories":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 服务","slug":"Android/Android-服务","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%9C%8D%E5%8A%A1/"},{"name":"通知服务","slug":"Android/Android-服务/通知服务","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%9C%8D%E5%8A%A1/%E9%80%9A%E7%9F%A5%E6%9C%8D%E5%8A%A1/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 服务","slug":"Android/Android-服务","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%9C%8D%E5%8A%A1/"},{"name":"通知服务","slug":"Android/Android-服务/通知服务","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%9C%8D%E5%8A%A1/%E9%80%9A%E7%9F%A5%E6%9C%8D%E5%8A%A1/"}]},{"title":"ProgressBar","slug":"ProgressBar","date":"2022-04-30T07:27:33.301Z","updated":"2022-05-06T11:59:04.525Z","comments":true,"path":"2022/04/30/ProgressBar/","link":"","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/2022/04/30/ProgressBar/","excerpt":"1.进度条常用属性 2.进度条样式详解","text":"1.进度条常用属性 2.进度条样式详解 进度条常用属性 属性 说明 max 进度条最大值（针对长条形） progress 进度条已完成的进度值（针对长条形） indeterminate 如果为true,进度条不显示进度值，显示为循环加载（针对长条形） style 进度条样式 123456789101112131415&lt;ProgressBar android:id=&quot;@+id/progressbar&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; /&gt;&lt;Button android:id=&quot;@+id/button&quot; android:clickable=&quot;true&quot; android:text=&quot;隐藏&quot; android:onClick=&quot;click&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; /&gt; 123456789101112131415161718192021222324252627282930313233public class MainActivity extends AppCompatActivity &#123; Button button; ProgressBar progressBar; boolean flag = false; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); button = findViewById(R.id.button); progressBar = findViewById(R.id.progressbar); &#125; String change()&#123; flag = !flag; return flag ?&quot;显示&quot;: &quot;隐藏&quot;; &#125; public void click(View view) &#123; button.setText(change()); if (progressBar.getVisibility() == View.GONE) &#123; progressBar.setVisibility(View.VISIBLE); &#125; else &#123; progressBar.setVisibility(View.GONE); &#125; &#125;&#125; 进度条样式详解1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&lt;ProgressBar android:id=&quot;@+id/p1&quot; android:max=&quot;100&quot; style=&quot;?android:attr/progressBarStyle&quot; android:layout_width=&quot;80dp&quot; android:layout_height=&quot;80dp&quot; /&gt; &lt;ProgressBar android:id=&quot;@+id/p2&quot; android:max=&quot;100&quot; style=&quot;?android:attr/progressBarStyleHorizontal&quot; android:layout_width=&quot;180dp&quot; android:layout_height=&quot;80dp&quot; /&gt; &lt;ProgressBar android:id=&quot;@+id/p3&quot; android:max=&quot;100&quot; style=&quot;?android:attr/progressBarStyleSmall&quot; android:layout_width=&quot;80dp&quot; android:layout_height=&quot;80dp&quot; /&gt; &lt;ProgressBar android:id=&quot;@+id/p4&quot; android:max=&quot;100&quot; style=&quot;?android:attr/progressBarStyleSmallTitle&quot; android:layout_width=&quot;80dp&quot; android:layout_height=&quot;80dp&quot; /&gt; &lt;ProgressBar android:id=&quot;@+id/p5&quot; android:max=&quot;100&quot; style=&quot;?android:attr/progressBarStyleLarge&quot; android:layout_width=&quot;80dp&quot; android:layout_height=&quot;80dp&quot; /&gt; &lt;ProgressBar android:id=&quot;@+id/p6&quot; android:max=&quot;100&quot; style=&quot;?android:attr/progressBarStyleInverse&quot; android:layout_width=&quot;80dp&quot; android:layout_height=&quot;80dp&quot; /&gt; &lt;ProgressBar android:id=&quot;@+id/p7&quot; android:max=&quot;100&quot; style=&quot;?android:attr/progressBarStyleSmallInverse&quot; android:layout_width=&quot;80dp&quot; android:layout_height=&quot;80dp&quot; /&gt; &lt;ProgressBar android:id=&quot;@+id/p8&quot; android:max=&quot;100&quot; style=&quot;?android:attr/progressBarStyleLargeInverse&quot; android:layout_width=&quot;80dp&quot; android:layout_height=&quot;80dp&quot; /&gt; &lt;Button android:id=&quot;@+id/button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;加载&quot; android:clickable=&quot;true&quot;/&gt; 1234567891011121314151617181920212223public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Button button = findViewById(R.id.button); button.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; int[] list = new int[]&#123;R.id.p1, R.id.p2, R.id.p3, R.id.p4, R.id.p5, R.id.p6, R.id.p7, R.id.p8&#125;; for (int i = 0; i &lt; 8; i++) &#123; ProgressBar progressBar = findViewById(list[i]); int progress = progressBar.getProgress(); System.out.println(progress); progressBar.setProgress(progress+10); &#125; &#125; &#125;); &#125;&#125;","categories":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 控件","slug":"Android/Android-控件","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%8E%A7%E4%BB%B6/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 控件","slug":"Android/Android-控件","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%8E%A7%E4%BB%B6/"}]},{"title":"ImageView","slug":"ImageView","date":"2022-04-29T15:24:23.705Z","updated":"2022-05-06T11:59:04.454Z","comments":true,"path":"2022/04/29/ImageView/","link":"","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/2022/04/29/ImageView/","excerpt":"1.常用属性 2.ScaleType详解","text":"1.常用属性 2.ScaleType详解 常用属性 属性 说明 src 放置图片资源 scaleType 设置图片的拉绳类型 maxHeight 设置图片的最大高度 maxWidth 设置图片的最大宽度 adjustViewBounds 调整View的界限,默认为false,此时maxHeight,maxWidth不生效 ScaleType详解12345&lt;ImageView android:layout_width=&quot;200dp&quot; android:layout_height=&quot;200dp&quot; android:scaleType=&quot;fitStart&quot; android:src=&quot;@drawable/Wave&quot; /&gt; fitStart保持宽高比缩放图片，直到较长的边与Image的边长相等，缩放完成后将图片放在ImageView的左上角 android:scaleType=&quot;fitStart&quot; fitCenter默认值，同上，缩放后放于中间 fitEnd同上，缩放后放于右下角 fitXY对图像的横纵方向进行独立缩放，使得该图片完全适应ImageV1ew,但是图片的宽高比可能会发生改变 center保持原图的大小，显示在ImageView的中心。当原图的size大于ImageView的size,超过部分裁剪处理 centerCrop保持宽高比缩放图片，直到完全覆盖ImageView,可能会出现图片的显示不完全，centerlnside保持宽高比缩放图片，直到ImageView能够完全地显示图片 matrix不改变原图的大小，从ImageView的左上角开始绘制原图，原图超过ImageView的部分作裁剪处理","categories":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 控件","slug":"Android/Android-控件","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%8E%A7%E4%BB%B6/"},{"name":"图片拉伸及填充","slug":"Android/Android-控件/图片拉伸及填充","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%8E%A7%E4%BB%B6/%E5%9B%BE%E7%89%87%E6%8B%89%E4%BC%B8%E5%8F%8A%E5%A1%AB%E5%85%85/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 控件","slug":"Android/Android-控件","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%8E%A7%E4%BB%B6/"},{"name":"图片拉伸及填充","slug":"Android/Android-控件/图片拉伸及填充","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%8E%A7%E4%BB%B6/%E5%9B%BE%E7%89%87%E6%8B%89%E4%BC%B8%E5%8F%8A%E5%A1%AB%E5%85%85/"}]},{"title":"EditText","slug":"EditText","date":"2022-04-29T08:37:45.481Z","updated":"2022-05-06T11:59:04.423Z","comments":true,"path":"2022/04/29/EditText/","link":"","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/2022/04/29/EditText/","excerpt":"1.EditText常用属性 2.获取EditText中的内容 3.常见问题","text":"1.EditText常用属性 2.获取EditText中的内容 3.常见问题 EditText常用属性 属性 描述 hint 输入提示 textColorHint 输入提示的颜色 inputType 输入类型(具体可以输入哪些类型可以Ctrl+B查看) drawableLeft[Right,Bottom,Top] 在输入框的左方添加可绘制资源 drawablePadding 设置可绘制资源与输入内容的间距 paddingLeft[Right,Bottom,Top] 设置内容(包括可绘制资源文件)与边框左边的间距 获取EditText中的内容1234567891011121314151617181920&lt;EditText android:id=&quot;@+id/edit_one&quot; android:layout_width=&quot;300dp&quot; android:layout_height=&quot;100dp&quot; android:drawableStart=&quot;@drawable/ic_baseline_account_circle_24&quot; android:drawablePadding=&quot;50dp&quot; android:hint=&quot;Hello&quot; android:paddingLeft=&quot;10dp&quot; android:inputType=&quot;text&quot; android:background=&quot;@color/teal_700&quot;/&gt;&lt;Button android:layout_gravity=&quot;center_vertical&quot; android:layout_width=&quot;200dp&quot; android:layout_height=&quot;70dp&quot; android:id=&quot;@+id/btn&quot; android:text=&quot;获取EditText中的文本内容&quot; /&gt; 1234567891011121314151617public class MainActivity extends AppCompatActivity &#123; EditText editText; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Button btn = findViewById(R.id.btn); editText = findViewById(R.id.edit_one); btn.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; System.out.println(editText.getText().toString()); &#125; &#125;); &#125;&#125; 常见问题关于Cannot resolve symbol &#39;@+id/edit_one&#39;的问题，点击Build-&gt;Clean Project重构项目就可解决","categories":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 控件","slug":"Android/Android-控件","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%8E%A7%E4%BB%B6/"},{"name":"常见问题","slug":"常见问题","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"},{"name":"已解决","slug":"常见问题/已解决","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%B7%B2%E8%A7%A3%E5%86%B3/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 控件","slug":"Android/Android-控件","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%8E%A7%E4%BB%B6/"},{"name":"常见问题","slug":"常见问题","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"},{"name":"已解决","slug":"常见问题/已解决","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%B7%B2%E8%A7%A3%E5%86%B3/"}]},{"title":"Button","slug":"Button","date":"2022-04-29T05:00:55.192Z","updated":"2022-05-06T11:59:04.396Z","comments":true,"path":"2022/04/29/Button/","link":"","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/2022/04/29/Button/","excerpt":"1.点击Button切换Button背景 2.Button点击事件","text":"1.点击Button切换Button背景 2.Button点击事件 点击Button切换Button背景 xml方式 在drawable资源文件夹中创建两个可绘制矢量图 在drawable资源文件夹下创建一个选择器btn_selector.xml state_pressed表示点击时的显示的图片，另一个为默认图片 12345&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;item android:state_pressed=&quot;true&quot; android:drawable=&quot;@drawable/ic_baseline_access_time_24&quot;/&gt; &lt;item android:drawable=&quot;@drawable/ic_baseline_add_to_home_screen_24&quot;/&gt;&lt;/selector&gt; 选择器在引用drawable时，如果是引用的颜色，显示不会生效 在layout布局资源文件中的activity_main.xml中添加一个Button并引用该文件，将该Button设置为可以点击 12345678&lt;Button android:id=&quot;@+id/btn_one&quot; android:background=&quot;@drawable/btn_selector&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:clickable=&quot;true&quot; android:text=&quot;Hello World!&quot; /&gt; 显示 默认显示 点击Button时显示 Button点击事件onTouch当按钮被点击时，OnTouch事件监听器优先被触发，触发后执行onTouch函数里面的内容，如何返回值为fasle，则表示该事件未被消费，还可以触发OnLongClickListener和OnClickListener，如果返回值为true，表示该事件被消费，不会触发OnLongClickListener和OnClickListener 1234567btn_one.setOnTouchListener(new View.OnTouchListener()&#123; @Override public boolean onTouch(View v, MotionEvent event) &#123; System.out.println(&quot;onTouch被触发&quot;); return false; &#125;&#125;); setOnLongClickListener当按钮被长时间点击时，如果该事件未被消费，触发该事件 1234567btn_one.setOnLongClickListener(new View.OnLongClickListener() &#123; @Override public boolean onLongClick(View v) &#123; System.out.println(&quot;setOnLongClickListener被触发&quot;); return true; &#125;&#125;); setOnClickListener当按钮被点击时，如果该事件未被消费，则触发该事件 123456btn_one.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; System.out.println(&quot;setOnClickListener被触发&quot;); &#125;&#125;);","categories":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 控件","slug":"Android/Android-控件","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%8E%A7%E4%BB%B6/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 控件","slug":"Android/Android-控件","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%8E%A7%E4%BB%B6/"}]},{"title":"TextView","slug":"TextView","date":"2022-04-29T01:48:25.791Z","updated":"2022-05-06T11:59:04.590Z","comments":true,"path":"2022/04/29/TextView/","link":"","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/2022/04/29/TextView/","excerpt":"1.运行第一个android应用 2.实现文字带阴影 2.实现文字跑马灯","text":"1.运行第一个android应用 2.实现文字带阴影 2.实现文字跑马灯 第一个Android应用创建Project下载并配置完Android Studio,选择New Project -&gt; 选择Empty Activity-&gt;next,等待项目构建 配置模拟器下载模拟器模拟器随便选能用就行 启动模拟器 第一个安卓应用 效果展示 项目结构介绍 TextView常用属性 字段 解释 layout_width 控件的宽度单位 dp 可选值:fill_parent、match_parent(和匹配父容器),wrap_content（包裹内容） layout_height 控件的高度dp，（同layout_width） id 控件的id，用于区别其他组件 text 控件中文本显示的内容 textColor 文本字体颜色 textStyle 可选风格:normal(无效果)，bold(加粗)，italic(斜体) textSize 文本字体大小单位sp, background 控件背景色（可以是图片） gravity 内容的对齐方向 textAllCape 设置大小写 hint 设置提示文本 textColorHint 设置提示文本的颜色 maxLength 限制文本长度 textIsSelectable 设置文本是否可以复制 将光标放在属性上，按ctrl+B可以查看对应属性的说明：name指该属性的名称，format指该属性可以填的内容的格式，常见格式有如下： string 字符串 reference 引用，可以引用其他.xml文件中的值 color 字符串表示的颜色#00000000分别为一个透明度通道和RGB dimension 尺寸 三种方式设置文本显示内容 直接在xml设置文本 123456&lt;TextView android:text=&quot;Hello Android!&quot; android:id=&quot;@+id/textview1&quot; android:layout_width=&quot;200dp&quot; ... /&gt; 引用strings.xml中的值 1234&lt;resources&gt; &lt;string name=&quot;app_name&quot;&gt;HelloAndroid&lt;/string&gt; &lt;string name=&quot;tv_one&quot;&gt;Hello Android&lt;/string&gt;&lt;/resources&gt; 1234567&lt;TextView android:id=&quot;@+id/textview1&quot; android:layout_width=&quot;200dp&quot; android:layout_height=&quot;200dp&quot; android:text=&quot;@string/tv_one&quot; ... /&gt; 使用java代码添加 12345678910public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); TextView viewById = (TextView) findViewById(R.id.textview1); viewById.setText(&quot;HELLO ANDROID&quot;); &#125;&#125; 案例文字带阴影1234567891011121314&lt;TextView android:id=&quot;@+id/textview1&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;@string/tv_one&quot; android:textColor=&quot;@color/black&quot; android:textSize=&quot;30sp&quot; android:background=&quot;@color/teal_200&quot; android:gravity=&quot;center_horizontal&quot; android:shadowColor=&quot;#FA0505&quot; android:shadowDx=&quot;10.0&quot; android:shadowDy=&quot;10.0&quot; android:shadowRadius=&quot;3.0&quot; /&gt; 文字跑马灯 设置TextView可点击，运行程序后点击就可实现跑马灯 1234567891011&lt;TextView ... android:singleLine=&quot;true&quot; android:ellipsize=&quot;end&quot; android:marqueeRepeatLimit=&quot;marquee_forever&quot; android:focusable=&quot;true&quot; android:clickable=&quot;true&quot;&gt; &lt;/TextView&gt; 添加请求焦点的标签，程序运行自动实现跑马灯 123456789&lt;TextView ... android:singleLine=&quot;true&quot; android:ellipsize=&quot;end&quot; android:marqueeRepeatLimit=&quot;marquee_forever&quot; android:focusable=&quot;true&quot; android:clickable=&quot;true&quot;&gt; &lt;requestFocus/&gt;&lt;/TextView&gt; 使用java代码设置请求焦点 1234567891011public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); TextView viewById = findViewById(R.id.textview1); viewById.requestFocus(); &#125;&#125; 使用自定义TextView请求焦点 12345678910111213141516171819202122@SuppressLint(&quot;AppCompatCustomView&quot;)public class MyView extends TextView &#123; public MyView(@NonNull Context context) &#123; super(context); &#125; public MyView(@NonNull Context context, @Nullable AttributeSet attrs) &#123; super(context, attrs); &#125; public MyView(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123; super(context, attrs, defStyleAttr); &#125; @Override public boolean isFocused() &#123; return true; &#125;&#125; 123456789101112 &lt;com.example.helloandroid.MyView ... android:singleLine=&quot;true&quot; android:ellipsize=&quot;marquee&quot; android:marqueeRepeatLimit=&quot;marquee_forever&quot; android:focusableInTouchMode=&quot;true&quot; android:clickable=&quot;true&quot; android:focusable=&quot;true&quot; &gt;&lt;/com.example.helloandroid.MyView&gt;","categories":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 控件","slug":"Android/Android-控件","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%8E%A7%E4%BB%B6/"},{"name":"效果","slug":"效果","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E6%95%88%E6%9E%9C/"},{"name":"文字阴影","slug":"效果/文字阴影","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E6%95%88%E6%9E%9C/%E6%96%87%E5%AD%97%E9%98%B4%E5%BD%B1/"},{"name":"跑马灯","slug":"效果/跑马灯","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E6%95%88%E6%9E%9C/%E8%B7%91%E9%A9%AC%E7%81%AF/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/"},{"name":"Android 控件","slug":"Android/Android-控件","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Android/Android-%E6%8E%A7%E4%BB%B6/"},{"name":"效果","slug":"效果","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E6%95%88%E6%9E%9C/"},{"name":"文字阴影","slug":"效果/文字阴影","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E6%95%88%E6%9E%9C/%E6%96%87%E5%AD%97%E9%98%B4%E5%BD%B1/"},{"name":"跑马灯","slug":"效果/跑马灯","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E6%95%88%E6%9E%9C/%E8%B7%91%E9%A9%AC%E7%81%AF/"}]},{"title":"JAVA","slug":"JAVA","date":"2022-03-17T08:44:48.786Z","updated":"2022-05-06T11:59:04.647Z","comments":true,"path":"2022/03/17/JAVA/","link":"","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/2022/03/17/JAVA/","excerpt":"文档描述","text":"文档描述 学习资源书籍： 《Head First Java》 《Java 8实战》 《Effective Java》 视频： java 8 java 代码： java 8代码片段 项目： Java简介JAVA环境 JRE (Java Runtime Environment)要运行一个java程序只需要 jre 即可 JDK (Java Development Environment)jdk 包含了编译工具javac.exe和运行工具java.exe JAVA语言特点 面向对象Java语言的设计集中于对象及其接口 ,它提供了简单的类机制以及动态的接口模型。对象中封装了它的状态变量以及相应的方法 ,实现了模块化和信息隐藏 ;而类则提供了一类对象的原型 ,并且通过继承机制 ,子类可以使用父类所提供的方法 ,实现了代码的复用。 分布性Java是面向网络的语言。通过它提供的类库可以处理 TCP/IP协议 ,用户可以通过URL地址在网络上很方便地访问其它对象。 简单性Java语言是一种面向对象的语言 ,它通过提供最基本的方法来完成指定的任务 ,只需理解一些基本的概念 ,就可以用它编写出适合于各种情况的应用程序。 Java略去了运算符重载、多重继承等模糊的概念 ,并且通过实现自动垃圾收集大大简化了程序设计者的内存管理工作。另外 ,Java也适合于在小型机上运行 ,它的基本解释器及类的支持只有 40KB左右 ,加上标准类库和线程的支持也只有 215KB左右。库和线程的支持也只有 215KB左右。 鲁棒性Java在编译和运行程序时 ,都要对可能出现的问题进行检查 ,以消除错误的产生。它提供自动垃圾收集来进行内存管理 ,防止程序员在管理内存时容易产生的错误。通过集成的面向对象的例外处理机制 ,在编译时,Java提示出可能出现但未被处理的例外 ,帮助程序员正确地进行选择以防止系统的崩溃。另外,Java在编译时还可捕获类型声明中的许多常见错误 ,防止动态运行时不匹配问题的出现。 可移植性与平台无关的特性使 Java程序可以方便地被移植到网络上的不同机器。同时 ,Java的类库中也实现了与不同平台的接口 ,使这些类库可以移植。另外,Java编译器是由 Java语言实现的 ,Java运行时系统由标准 C实现 ,这使得Java系统本身也具有可移植性。 体系结构中立Java解释器生成与体系结构无关的字节码指令 ,只要安装了 Java运行时系统 ,Java程序就可在任意的处理器上运行。这些字节码指令对应于 Java虚拟机中的表示 ,Java解释器得到字节码后 ,对它进行转换 ,使之能够在不同的平台运行。 安全性用于网络、分布环境下的 Java必须要防止病毒的入侵。 Java不支持指针,一切对内存的访问都必须通过对象的实例变量来实现 ,这样就防止程序员使用”特洛伊”木马等欺骗手段访问对象的私有成员 ,同时也避免了指针操作中容易产生的错误。 解释执行Java解释器直接对 Java字节码进行解释执行。字节码本身携带了许多编译时信息 ,使得连接过程更加简单。 动态性Java的设计使它适合于一个不断发展的环境。在类库中可以自由地加入新的方法和实例变量而不会影响用户程序的执行。并且 Java通过接口来支持多重继承 ,使之比严格的类继承具有更灵活的方式和扩展性。 多线程多线程机制使应用程序能够并行执行 ,而且同步机制保证了对共享数据的正确操作。通过使用多线程 ,程序设计者可以分别用不同的线程完成特定的行为 ,而不需要采用全局的事件循环机制 ,这样就很容易地实现网络上的实时交互行为。 高性能和其它解释执行的语言如 BASIC、 TCL不同 ,Java字节码的设计使之能很容易地直接转换成对应于特定CPU的机器码 ,从而得到较高的性能。 JAVA语言发展史 版本 年份 新特性 类与接口数量 1.0 1996 语言本身 211 1.1 1997 内部类 477 1.2 1998 无 1524 1.3 2000 无 1840 1.4 2004 断言 2723 5.0（1.5） 2004 泛型、增强for循环、可变元参数、自动打包、元数据、枚举、静态导入 3279 6（1.6） 2006 无 3777 java 5.0及以后默认省去了1 JVM内存模型 环境搭建专业术语 术语 缩写 解释 Java Development Kit JDK 编写Java程序的程序员使用的软件（Java 开发环境工具包） Java Runtime Environment JRE 运行Java程序的用户使用的软件（Java运行环境） Standard Edition SE 用于桌面或简单的服务器应用的Java平台（标准版） Enterprise Edition EE 用于复杂的服务器应用的Java平台（企业版） Micro Edition ME 用于微型手机cell phone和其他小型设备的Java平台（微型版） Java 2 J2 一个过时的术语，用于描述1998年~2006年之间的Java版本 Software Development Kit SDK 一个过时的术语，用于描述1998年~2006年之间的JDK Update u Sun的术语，用于发布修改的bug NetBeans Sun的集成开发环境 Java Archive JAR Java 归档文件,是与平台无关的文件格式(Java标准版归档文件) Web Application Archive WAR WAR 与 JAR 类似，是JAVA编写的Web应用程序打包文件用于运行在Web容器中 Enterprise Archive file EAR 除了包含JAR、WAR以外，还包括 EJB 组件(Java企业版归档文件) Java Virtual Machine JVM Java虚拟机，用于运行Java字节码 下载JDK登录Oracle官方提供的下载页，选择需要下载的版本,这里以java 17为例 当下载的版本不是最新版时，需要注册Oracle账号进行，后缀为.zip的需要配置环境变量 选择.exe后缀下载，下载完成双击进入安装向导，选择安装路径，下一步点击下一步即可完成安装 安装完成后在命令提示符里输入java -version，提示版本信息则安装成功 1234C:\\Users\\****&gt;java -versionjava version &quot;17.0.2&quot; 2022-01-18 LTSJava(TM) SE Runtime Environment (build 17.0.2+8-LTS-86)Java HotSpot(TM) 64-Bit Server VM (build 17.0.2+8-LTS-86, mixed mode, sharing) 环境变量打开资源管理器-&gt;右键单击此电脑-&gt;左键单击属性-&gt;左键单击系统设置-&gt;左键单击环境变量-&gt;单击新建 输入变量名`JAVA_HOME，变量值为java的安装路径，安装路径下可见如下文件 再新建环境变量ClassPath,值为.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar; 点击所有确认按钮保存成功后，环境变量设置完毕 HelloWorld新建文件夹HelloWorld.java,编写如下代码并保存12345public class HelloWorld&#123; public static void main(String[] args)&#123; System.out.println(&quot;Hello world!&quot;); &#125;&#125;使用如下命令编译 1javac.exe HelloWorld.java 使用如下命令执行 1java.exe HelloWorld 输出： 1Hello World! JShell在命令行输入jshell可进入java的交互式编程环境 基础语法文档注释 单行注释 1//双斜杠用于单行注释 多行注释 123/*用于多行注释*/ 类注释：类注释必须放在import之后类之前 123/** * 类注释用于说明该类的特征，使用方法 */ 方法注释: 12345/** * @param 变量描述 * @return 返回值描述 * @throws 类异常描述 */ 域注释 123/** * 域说明 */ 通用注释 1234567/** * @author * @version * @deprecated * @see * @since */ 标识符在java语言中，变量、常量、类、对象、方法、语句块等的名字被称为标识符。 标识符以字母、下划线、数字、$、￥组成 标识符可以是汉字，但不建议使用汉字作为标识符 不能以数字开头 不能是java语言关键字。 合法标识符:name123,name_123,_name123,$abc 非法标识符:123name，&amp;name,#name 常量运行过程中不变的量称为常量。如字符，字符串，数字，布尔值。 &#39;a&#39; , &quot;abc&quot;, 123 , ture , false 标识符可以作为常量，但要用final修饰 1final int arg = 123; 变量在运行过程中可以改变的量。java语言中采用标识符作为变量。 数据类型java中数据类型包括基本数据类型和引用数据类型 基本类型 整型 byte, short, int, long 浮点型 float ,double 字符型 char 布尔型 boolean 注:自动类型转换:当运算时，若运算类型不一致，jvm将对数据类型进行自动转换，转换规则为:由低级向高级转换 \\ 不参与转换 低级 -&gt; -&gt; -&gt; -&gt; \\ -&gt; 高级 类型 boolean byte short char int long long long float double java 1bit 1B 2B 2B 4B 8B \\ 4B 8B 32位机c语言 1bit \\ 2B 1B 4B 4B 8B 4B 8B 64位机c语言 1bit \\ 2B 1B 4B 8B 8B 4B 8B 引用类型java中引用类型的变量非常类似于C/C++的指针，引用类型指向一个对象。 引用类型java中引用类型包括： 类 接口 数组 包装类型java语言将基本类型包装，得到对应的基本类型的包装类，称为包装类型。包装类型也是引用类型，相比与基本类型，包装类型有更多的操作，简化程序的编写过程。 基本数据类型 包装类型 byte Byte shor Short int Integer long Long float Float double Double char Character boolean Boolean 自动装箱和自动拆箱是Java SE5后具有的特性，该特性使得包装类型和基本数据类型能具有相同的操作。 自动装箱 将基本数据类型自动转换为包装数据类型。 1Integer i = 10;//自动装箱 自动拆箱 将包装数据类型自动转换为基本数据类型 1int ii = i;//自动拆箱 原本等号的左右两端的类型是不同的，一个是基本数据类型，一个是引用数据类型，不能用赋值符号直接赋值，但Java SE5后自动装箱在装箱的时候自动调用的是Integer的valueOf(int)方法。而在拆箱的时候自动调用的是Integer的intValue()方法。其他包装类同理。 关键字java关键字是java语言事先定义的具有特殊用途的标识符，关键字有53个，其中有2个保留字，保留字也是标识符，但不能被使用，是java语言保留下供未来特殊用途使用。 12345678abstract class extends implements null strictfp trueassert const false import package super tryboolean continue final instanceof private switch voidbreak default finally int protected synchronized volatilebyte do float interface public this whilecase double for long return throwcatch else goto native short throwschar enum if new static transient 运算符 算术运算符 +,-,*,/,%,++,-- 前缀自增、自减:先进行自增(+1)或者自减(-1)运算，再进行表达式运算。 后缀自增、自减:先进行表达式运算，再进行自增(+1)或者自减(-1)运算 123456int a = 5;int b = 5;int x = 2*++a;int y = 2*b++;System.out.println(&quot;前缀a=&quot;+a+&quot;,x=&quot;+x);//前缀a=6,x=12System.out.println(&quot;后缀b=&quot;+b+&quot;,y=&quot;+y);//后缀b=6,y=10 关系运算符 ==,!=,&gt;=,&lt;=,&gt;,&lt; 位运算符 &amp;,|,^,~,&lt;&lt;,&gt;&gt;,&gt;&gt;&gt; java中右移运算符有两个&gt;&gt;和&gt;&gt;&gt;,&gt;&gt;表示带符号右移,&gt;&gt;&gt;表示无符号右移 对于正数，两个右移运算符无区别 对于负数，&gt;&gt;&gt;将带右移的数视作无符号整数，所有的位都向右移动指定位数，低位将被移除，高位被0补齐；&gt;&gt;将待右移的数是做带符号整数，只将表示数值的位进行右移，符号位不移动，低位移除，高位0补齐， 123456int a = -4;int b = 4;System.out.println(a &gt;&gt;&gt; 1);//2147483646System.out.println(a &gt;&gt; 1);//-2System.out.println(b &gt;&gt; 1);//2System.out.println(b &gt;&gt;&gt; 1);//2 逻辑运算符 &amp;&amp;,||,! 短路逻辑:当&amp;&amp;的左边为false时，&amp;&amp;的右边不再继续运算；当||的左边为true时，||的右边不再运算 赋值运算符 =,+=,-=,*=,/=,%=,&lt;&lt;=,&gt;&gt;=,&amp;=,^=,|= 条件运算符 ()=()?():() value = (expression)?(if expression is true):(if expression is false) instanceof运算符 该运算符用于检测一个对象是否为某种类型或接口 123public class A &#123; //code ...&#125; 123public class B extends A&#123; //code ...&#125; 1234567891011121314151617181920public class Main &#123; public static void main(String[] args) &#123; A a = new A(); B b = new B(); if (a instanceof B)&#123; System.out.println(&quot;a instance of B&quot;); &#125; if (b instanceof A)&#123; System.out.println(&quot;b instance of A.&quot;); &#125; &#125;&#125;/*输出:b instance of A.*/ 运算符优先级: 操作符 类别 关联性 () [] . 后缀 左到右 高 expr++ expr-- 一元 从左到右 ↓ ++expr --expr + - ～ ！ 一元 从右到左 ↓ * / ％ 乘性 左到右 ↓ + - 加性 左到右 ↓ &gt;&gt; &gt;&gt;&gt; &lt;&lt; 移位 左到右 ↓ &gt; &gt;= &lt; &lt;= 关系 左到右 ↓ == != 相等 左到右 ↓ ＆ 按位与 左到右 ↓ ^ 按位异或 左到右 ↓ &#124; 按位或 左到右 ↓ &amp;&amp; 逻辑与 左到右 ↓ &#124; &#124; 逻辑或 左到右 ↓ ?: 条件 从右到左 ↓ =,+=,-=,*=,/=,％=,&gt;&gt;=,&lt;&lt;=,＆=,^=,&#124;= 赋值 从右到左 ↓ , 逗号 左到右 低 流程控制 if...else... if...else if...else switch case后面的值的类型要与ch的类型一致，否则会编译不通过 123456789101112 char ch = &#x27;a&#x27;;switch (ch) &#123; case &#x27;a&#x27;: System.out.println(&quot;a&quot;); break; case &#x27;b&#x27;: System.out.println(&quot;b&quot;); break; default: System.out.println(&quot;c&quot;);&#125; 循环 while循环 do ... while ...循环 for循环 增强for循环 增强for循环用于数组或者实现了Iterable接口的对象的遍历，是对for循环的简写。 1234567891011121314151617181920int[] arr = &#123;1,2,3,4,5&#125;;ArrayList&lt;Character&gt; list = new ArrayList&lt;&gt;();list.add(&#x27;a&#x27;);list.add(&#x27;b&#x27;);list.add(&#x27;c&#x27;);list.add(&#x27;d&#x27;);list.add(&#x27;e&#x27;);for (int i : arr)&#123; System.out.print(i);&#125;System.out.println();for (char ch: list)&#123; System.out.print(ch);&#125;/*输出：12345abcde*/ continue关键字 break关键字 带标签循环体 可以为循环体定义一个标签，标签的名字是区别于关键字的标识符。可以使用continue和break直接跳到该标签处 1234567891011121314151617181920212223label2:for (int i = 0;i &lt;= 5;i++)&#123; label1:while (true)&#123; i++; if(i == 3)&#123; System.out.println(&quot;i = 3&quot;); i = 9; continue label1;//直接跳到label1定义的循环 &#125; if (i == 10)&#123; System.out.println(&quot;i = 10&quot;); break label2;//直接跳出label2定义的循环 &#125; System.out.println(&quot;i = &quot;+i); &#125; &#125;/*输出：i = 1i = 2i = 3i = 10*/ 数组一维数组12345678910111213//声明和赋值同时进行int[] arr1 = &#123;1,2,3&#125;;//动态声明后续赋值// n 是变量int[] arr2 = new int[n];arr2[0] = 1;arr2[1] = 2;arr2[2] = 3;... //创建并初始化int[] arr = new int[]&#123;1,2,3&#125;; 多维数组12345678910111213//声明同时赋值，编译器将自动计算行和列int[][] arr = &#123; &#123; 1, 2, 3 &#125;, &#123; 5, 6, 7&#125;, &#123; 9, 10 &#125;&#125;;System.out.println(&quot;arr 有 %d 行&quot;.formatted(arr.length));System.out.println(&quot;arr[0] 有 %d 列&quot;.formatted(arr[0].length));for (int[] i : arr)&#123; for (int j:i)&#123; System.out.println(j); &#125;&#125; 12//动态声明，需要将指定行int[][] arr1 = new int[][4];//不合法 1234567891011121314int[][] arr2 = new int[3][];//合法，但未指定列//后续对arr2的每列动态声明长度，该循环为arr2声明了一个3行4列的数组for(int i = 0;i &lt; 3;i++)&#123; arr2[i] =new int[4];&#125;//也可以将arr2声明为不定长二维数组arr2[0] = new int[2];//声明第一列长度为2arr2[1] = new int[1];//声明第二列长度为1arr2[2] = new int[10];//声明第三列长度10 123int[][] arr3 = new int[3][4];//合法,3行4列数组 面向对象 OOA（Object-Oriented Analysis）面向对象分析 OOD (Object-Oriented Design)面向对象设计 OOP(Object-Oriented Programming)面向对象编程 访问控制 成员访问控制 被访问控制作用的成员变量和成员函数只能在指定的使用范围内使用。java的成员访问控制有如下四种: - `private` - `default` - `protected` - `public` 使用范围 private default protected public 同一类中 √ √ √ √ 同一包中子类和非子类 × √ √ √ 不同包中的子类 × × √ √ 不同包中的非子类 × × × √ 类访问控制 类访问控制只有两种: default public ​ 作用范围和成员访问控制一样 default 即默认的访问控制，不能写default关键字来声明 类 属性 定义在类中的变量被称作属性。 方法 定义在类中的函数被称为方法。方法不能修改基本数据类型的参数，可以修改对象引用的参数。 方法也不能修改String类的参数，java的形参传递的是参数的拷贝，String类被传入方法中被使用时实际上是在常量池拷贝了一份一样的字符串。而其他类作为参数时，拷贝的是该类的对象引用，即地址值，地址指向的区域数据被修改，那么实际上该对象的属性就被修改了。 方法可变参数 1234567891011121314151617public class Main &#123; public static void main(String[] args) &#123; variable(0,1,2,3,4,5,6); variable(0,1,2,3); &#125; public static void variable(int... args) &#123; for (int i : args) &#123; System.out.print(i); &#125; System.out.println(); &#125;&#125;/*01234560123*/ 方法重载与方法重写 重载是一个方法对应于不同的参数类型或不同的参数个数，根据调用时使用的参数不同，调用的方法体不同。 重写是某个方法继承于父类的方法，需要覆盖父类的该方法，该方法与父类有相同的方法名，相同的参数类型，相同的参数个数，相同的返回值，不同的方法体。 重载： 123456789101112public static void test(int a,int b,int c)&#123; ...&#125;public static void test(int a,int b)&#123; ...&#125;public static void test(String s,int a)&#123; ...&#125;public static int test(String s,String a)&#123; ...&#125; 重写: 123456@Overridepublic String toString() &#123; String s; ... return s;&#125; 类 类是对象的蓝图，是现实中一类具有共同属性和行为的事物的抽象。 1234567public class Animal&#123; public int age = 10; public void eat() &#123; System.out.println(&quot;动物吃&quot;); &#125;&#125; 此处Animal是一个对象，该对象拥有一个age属性和一个eat()方法。 对象 是类的具体实例，对象拥有类的属性和方法。 1234567public class Main&#123; public static void main(String[] args)&#123; Animal animal = new Animal(); System.out.println(animal.age); animal.eat(); &#125;&#125; 此处animal是一个对象，使用new关键字创建了Animal类的一个实例，该实例即为一个对象。该对象具有Animal的属性和方法。 内部类 定义在类的内部的类，此处Inner为内部类 12345678910public class Outer &#123; protected void in()&#123; System.out.println(&quot;类方法in()&quot;); &#125; public class Inner&#123; void in()&#123; System.out.println(&quot;内部类方法in()&quot;); &#125; &#125;&#125; 12345678910111213141516public class Main&#123; public static void main(String[] args) &#123; Outer outer = new Outer(); outer.in(); Outer.Inner inner = outer.new Inner(); inner.in(); //Outer.Inner inner = new Outer().new Inner(); &#125;&#125;/*输出：类方法in()内部类方法in()*/ 局部内部类 定义在方法里的类，该类只能在方法中使用。 特点： 内部类可以直接访问”外部类”的成员 “外部类”要访问内部类的成员要创建对象 12345678910111213public class Outer &#123; protected void in()&#123; class Inner&#123; void in()&#123; System.out.println(&quot;局部内部类方法in()&quot;); &#125; &#125; Inner inner = new Inner(); inner.in(); &#125;&#125; 1234567891011public class Main&#123; public static void main(String[] args) &#123; Outer outer = new Outer(); outer.in(); &#125;&#125;/*输出：局部内部类方法in()*/ 匿名内部类 匿名内部类是没有名字的类，该类继承自某个类或者实现了某个接口。 123public interface Outer &#123; void show();&#125; 123456789101112131415//实现了Outer接口并调用了接口的show()方法public class Main&#123; public static void main(String[] args) &#123; new Outer() &#123; @Override public void show() &#123; System.out.println(&quot;Outer 接口&quot;); &#125; &#125;.show(); &#125;&#125;/*输出：Outer 接口*/ 12345678910111213141516171819//若想多次调用该匿名内部类的方法，可以为该类创建对象， public class Main&#123; public static void main(String[] args) &#123; Outer outer = new Outer() &#123; @Override public void show() &#123; System.out.println(&quot;Outer 接口&quot;); &#125; &#125;; outer.show(); outer.show(); &#125; &#125; /* 输出： Outer 接口 Outer 接口 */ 1234567891011//当接口只有一个方法时，可以使用箭头函数 public class Main&#123; public static void main(String[] args) &#123; ((Outer) () -&gt; System.out.println(&quot;Outer 接口&quot;)).show(); &#125; &#125; /* 输出： Outer 接口 */ 箭头函数参考：lambda 匿名内部类的应用： 12345678910111213141516171819202122232425262728293031323334353637public interface Sleep &#123; void sleep(); &#125; public class Animal &#123; void sleap(Sleep s)&#123; s.sleep(); &#125; &#125; public class Main&#123; public static void main(String[] args) &#123; Animal animal = new Animal(); animal.sleap(new Sleep() &#123; @Override public void sleep() &#123; System.out.println(&quot;马站着睡！&quot;); &#125; &#125;); animal.sleap(new Sleep() &#123; @Override public void sleep() &#123; System.out.printf(&quot;人躺着睡！&quot;); &#125; &#125;); // animal.sleap(() -&gt; System.out.println(&quot;马站着睡！&quot;)); // animal.sleap(() -&gt; System.out.printf(&quot;人躺着睡！&quot;)); &#125; &#125; /* 输出： 马站着睡！ 人躺着睡！ */ 抽象类 抽象类是对类的抽象，不能像一般类一样刻画某一个对象的细节，只能声明某个类有什么属性和方法。在java中一个没有方法体的方法应该被定义为抽象方法，一个有抽象方法的类应该被定义为抽象类。抽象类因为没有具体的细节来描述一个对象，所以不能被实例化，因此不能用new关键字来实例化一个对象，它只能被他的子类继承并实现它的方法。 抽象类和抽象方法都用关键字abstract修饰 1234567public abstract class Animal&#123; int age; void eat()&#123; System.out.println(&quot;动物都要吃东西!&quot;); &#125; abstract void sleap();&#125; 接口接口是对事物行为的抽象，其中的方法规定了实现它接口的类必须做什么而不关心怎么做。 定义一个接口使用interface关键字。 123public interface Sleep &#123; void sleep();&#125; 接口中的方法默认为public abstract方法 接口中的属性都是常量，默认为public static final 使用default关键字修饰的方法可以有实现 接口中可以有私有方法，但私有方法不能被继承所以被定义的私有方法必须被实现 12345public interface Sleep &#123; default void sleep()&#123; //code ... &#125;&#125; 接口中使用static关键字修饰的方法只能通过接口名称.方法名称调用。 接口不能包含成员变量，除了 static 和 final 变量。 抽象类和接口的区别: 接口是对行为的抽象，抽象类是对事物的抽象 接口没有构造方法，而抽象类可以有构造方法 接口中不能含有静态代码块，抽象类中可以有静态代码块 一个类只能继承于一个抽象类，但可以实现多个接口 枚举枚举类表示常量 1234567891011121314public enum Week &#123; Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday&#125;public class Main&#123; public static void main(String[] args) &#123; Week a = Week.Friday; System.out.printf(String.valueOf(a)); &#125;&#125;/*输出:Friday*/ 所有的类都有个clone()方法，该方法被protected修饰，需要重写后使用。该方法属于浅拷贝。 常用类 Calendar Date String和StringBuilder Random BigInteger处理任意精度的整数 BigDecimal处理任意精度的浮点数 类之间的关系 依赖(“uses-a”)一个类的方法中操作了某个对象 聚合(“has-a”)类中含有某个类的对象 继承(“is-a”)继承于某个类 static 使用static修饰方法表示该方法是静态方法 使用static修饰修饰属性表示该属性是静态属性 使用static修饰的代码块表示该代码块是静态代码块 使用static关键字修饰的方法或属性本质上不属于该类，但可以理解为它属于该类但不属于类创建的对象，但可以通过该类或得该属性和方法。 1234567891011121314151617public class Main &#123; static String className = &quot;main&quot;; static void method()&#123; System.out.println(&quot;这是Main类中的静态方法!&quot;); &#125; static &#123; System.out.println(&quot;Main 类被加载!&quot;); &#125; public static void main(String[] args) &#123; System.out.println(Main.className); Main.method(); &#125;&#125; 四大特性 多态 同一类事物，不同对象所表现的行为不一样。 123456public class Child &#123; public void eat()&#123; System.out.println(&quot;儿子吃饭!&quot;); &#125;&#125; 123456public class PoorChild extends Child&#123; @Override public void eat() &#123; System.out.println(&quot;儿子吃空气!&quot;); &#125;&#125; 1234567public class RichChild extends Child &#123; @Override public void eat() &#123; System.out.println(&quot;儿子吃山珍海味!&quot;); &#125;&#125; 1234567891011121314151617181920public class Main &#123; public static void main(String[] args) &#123; Child child = new Child(); child.eat(); Child poorChild = new PoorChild(); poorChild.eat(); Child richChild = new RichChild(); poorChild.eat(); &#125;&#125;/*输出:儿子吃饭!儿子吃空气!儿子吃山珍海味!*/ 多态口诀:编译看左边，执行看右边 继承 封装 将属性封装在类中，使用访问控制进行数据保护，将方法封装在类中，隐藏具体的实现细节，减少耦合，方便使用易用性。 抽象 泛型泛型的好处12345678910111213141516171819public class Main &#123; public static void main(String[] args) &#123; Collection collection = new ArrayList&lt;&gt;(); collection.add(&quot;hello&quot;); collection.add(&quot;world&quot;); collection.add(1000); Iterator iterator = collection.iterator(); while (iterator.hasNext())&#123; System.out.println(iterator.next()); &#125; &#125;&#125;/*helloworld1000*/ 将运行时期的异常提前到了编译期 当未指定Collection中存储的类型时，默认任为&lt;Object&gt;,指定类型后可以编译器将检查存储数据的类型，所以当collection.add(100)时报错 避免强制转换 123456789101112131415161718public class Main &#123; public static void main(String[] args) &#123; Collection&lt;String&gt; collection = new ArrayList&lt;String&gt;(); collection.add(&quot;hello&quot;); collection.add(&quot;world&quot;); Iterator&lt;String&gt; iterator = collection.iterator(); while (iterator.hasNext())&#123; String s = iterator.next(); System.out.println(s); &#125; &#125;&#125;/*helloworld*/ 泛型类 12345678910111213141516171819202122232425262728public class Generic&lt;T&gt; &#123; T t; void setT(T t)&#123; this.t = t; &#125; T getT()&#123; return t; &#125;&#125;public class Main &#123; public static void main(String[] args) &#123; Generic&lt;String&gt; s = new Generic&lt;&gt;(); s.setT(&quot;hello&quot;); System.out.println(s.getT()); Generic&lt;Integer&gt; i = new Generic&lt;&gt;(); i.setT(1000); System.out.println(i.getT()); &#125;&#125;/*hello1000*/ 定义多参数列表泛型类 123456789101112public class Generic&lt;T,E,V&gt; &#123; V v; &lt;T&gt; T get(T t) &#123; return t; &#125; &lt;E&gt; void show(E e)&#123; System.out.println(e); &#125; void setV(V v) &#123; this.v = v; &#125;&#125; 泛型方法123456789101112131415161718192021public class Generic&#123; &lt;T&gt; T show(T t)&#123; System.out.println(t); return t; &#125;&#125;public class Main &#123; public static void main(String[] args) &#123; Generic s = new Generic(); String name = s.show(&quot;孙悟空&quot;); int age = s.show(18); System.out.println(name+age); &#125;&#125;/*孙悟空18孙悟空18*/ 泛型接口12345678910111213141516171819202122232425//泛型接口的定义和泛型类定义一样public interface Generic&lt;T&gt;&#123; &lt;T&gt; void show(T t);&#125;//泛型接口的是仙女要加泛型参数Tpublic class GenericImp&lt;T&gt; implements Generic&lt;T&gt;&#123; @Override public &lt;T&gt; void show(T t) &#123; System.out.println(t); &#125;&#125;public class Main &#123; public static void main(String[] args) &#123; GenericImp genericImp = new GenericImp(); genericImp.show(&quot;孙悟空&quot;); genericImp.show(18); &#125;&#125;/**孙悟空18*/ 泛型通配符&lt;?&gt;可以代表任意的类型，代表Object及其子类 &lt;? extends Number&gt;，泛型通配符上限，代表Number及其子类 &lt;? super Number&gt;,泛型通配符下限，代表Number及其父类 123456List&lt;?&gt; list = new ArrayList&lt;Object&gt;();//合法List&lt;? extends Number&gt; list1 = new ArrayList&lt;Number&gt;();//合法List&lt;? extends Number&gt; list2 = new ArrayList&lt;Object&gt;();//非法List&lt;? super Number&gt; list3 = new ArrayList&lt;Number&gt;();//合法List&lt;? super Number&gt; list4 = new ArrayList&lt;Object&gt;();//合法List&lt;? super Number&gt; list5 = new ArrayList&lt;Integer&gt;();//非法 Stream API编程思想 函数式编程思想 强调做什么而不强调怎么做。 面向对象编程思想 必须通过对象来做某件事情。 Lambda表达式Lambda表达式格式Lambda表达式相当于一个匿名的函数，没有指出函数名和返回结果类型，但jvm可以对其进行推导。Lambda表达式程序编写更加简洁。 123([Type1 param1,Type2 param2 ...]) -&gt; &#123; //code...&#125; 案例: 12345678910111213141516171819202122232425262728293031323334353637383940414243public interface Sleep &#123; void sleep();&#125;public class Animal&#123; void sleep(Sleep s)&#123; s.sleep(); &#125;&#125;public class Horse implements Sleep&#123; @Override public void sleep() &#123; System.out.println(&quot;马站着睡！&quot;); &#125;&#125;public class Main &#123; public static void main(String[] args) &#123; Animal animal = new Animal(); //类实现类接口 Sleep horse = new Horse(); animal.sleep(horse); //利用内部类实现接口 animal.sleep(new Sleep() &#123; @Override public void sleep() &#123; System.out.println(&quot;老虎趴着睡！&quot;); &#125; &#125;); //利用lambda表达式实现接口,省略模式 animal.sleep(()-&gt; System.out.println(&quot;人躺着睡！&quot;)); &#125;&#125;/*输出：马站着睡！老虎趴着睡！人躺着睡！*/ 抽象方法无参： 12345678910111213public interface Sleep &#123; void sleep();&#125;public class Main &#123; public static void main(String[] args) &#123; sleep(()-&gt; System.out.println(&quot;人躺着睡觉!&quot;)); &#125; public static void sleep(Sleep s)&#123; s.sleep(); &#125;&#125; 抽象方法带参： 12345678910111213public interface Sleep &#123; void sleep(int x);&#125;public class Main &#123; public static void sleep(Sleep s)&#123; s.sleep(8); &#125; public static void main(String[] args) &#123; sleep((int x)-&gt; System.out.println(&quot;人躺着睡觉!睡 %d 个小时&quot;.formatted(x))); &#125;&#125; 抽象方法带参带返回值: 12345678910111213141516171819public interface Sleep &#123; int sleep(int x);&#125;public class Main &#123; public static void main(String[] args) &#123; int s = sleep((int x)-&gt;&#123; System.out.println(&quot;人躺着睡觉!睡 %d 个小时&quot;.formatted(x)); return x; &#125;); System.out.println(s); &#125; public static int sleep(Sleep s)&#123; s.sleep(8); return 8; &#125;&#125; 12345678910111213141516public interface Num &#123; int add(int x,int y);&#125;public class Main &#123; public static void main(String[] args) &#123; int s = num((int x,int y)-&gt;&#123; return x + y; &#125;); System.out.println(s); &#125; public static int num(Num n)&#123; return n.add(10,11); &#125;&#125; Lambda表达式省略模式 没有返回值时，省略参数类型,但要么全部省略要不省略 1234567891011121314public interface Num &#123; void add(int x, int y);&#125;public static void main(String[] args) &#123; num((x, y) -&gt; &#123; System.out.println(x + y); &#125;);&#125;public static void num(Num n) &#123; n.add(10, 11);&#125; 没有返回值，且当参数只有一个时可以省去参数的括号 12345678910111213141516171819202122232425262728293031323334 public interface Num &#123; void add(int x); &#125; public static void main(String[] args) &#123; num(x -&gt; &#123;System.out.println( x);&#125;); &#125; public static void num(Num n) &#123; n.add(10); &#125; // x-&gt;System.out.println(x)- 没有返回值，且当代码块只有一句话时可以省去大括号 ```java public interface Num &#123; void add(int x); &#125; public static void main(String[] args) &#123; num(x -&gt; System.out.println(x)); &#125; public static void num(Num n) &#123; n.add(10); &#125; 有返回值，且当代码块只有一句话时，若省掉大阔话，那么return 也该省略 1234567891011public interface Num &#123; int add(int x,int y);&#125;public static void main(String[] args) &#123; int s = num((x,y)-&gt; x+y); System.out.println(s);&#125;public static int num(Num n)&#123; return n.add(10,11);&#125; 使用Lambda表达式的前提： 必须要有接口，且接口中只有一个抽象方法，若有多个抽象方法，可以使用匿名内部类 必须要有上下文环境，编译器才能通过上下文环境推导出Lambda表达式对应的接口类型 可以通过局部变量赋值推导 可以通过方法的参数类型推导 Lambda表达式可以被推导的类型只能是接口，参数或者局部变量为匿名内部类和抽象类时不能使用Lambda表达式 Lambda表达式和匿名内部类的区别: 所需类型不同匿名内部类：可以是接口，也可以是抽象类，还可以是具体类Lambda表达式：只能是接口 使用限制不同如果接口中有且仅有一个抽象方法，可以使用Lambda表达式，也可以使用匿名内部类如果接口中多于一个抽象方法，只能使用匿名内部类，而不能使用Lambda表达式 实现原理不同匿名内部类：编译之后，产生一个单独的.class字节码文件Lambda表达式：编译之后，没有一个单独的.class字节码文件,对应的字节码会在运行的时候动态生成 方法引用 引用类方法（引用类的静态方法） 12345678910111213141516public interface Convert&#123; int convert(String s);&#125;public class Main &#123; public static void main(String[] args) &#123; userConvert(s -&gt; Integer.parseInt(s));//Lambda表达式 userConvert(Integer::parseInt);//方法引用，类的静态方法 &#125; public static void userConvert(Convert c)&#123; int result = c.convert(&quot;666&quot;); System.out.println(result); &#125;&#125; 引用对象的实例方法 123456789101112131415161718192021222324public interface Upper&#123; String upper(String s);&#125;public class CastUpper implements Upper &#123; @Override public String upper(String s) &#123; return s.toUpperCase(); &#125;&#125;public class Main &#123; public static void main(String[] args) &#123; CastUpper castUpper = new CastUpper(); cast(castUpper::upper);//对象的实例方法 &#125; public static void cast(Upper c)&#123; String s = c.upper(&quot;Hello world&quot;); System.out.println(s); &#125;&#125; 引用类的实例方法 123456789101112131415public interface SubString&#123; String substr(String s,int x,int y);&#125;public class Main &#123; public static void main(String[] args) &#123; userSub((s,x,y) -&gt; s.substring(x,y));//Lambda表达式 userSub(String::substring);//类的实例方法，当参数有多个时，第一个参数默认为类的实例 &#125; public static void userSub(SubString c)&#123; String result = c.substr(&quot;012345&quot;,2,5); System.out.println(result); &#125;&#125; 引用构造器 12345678910111213141516171819202122232425262728293031323334353637383940414243444546public class Student&#123; int age; String name; Student(int age,String name)&#123; this.age = age; this.name = name; &#125; int getAge()&#123; return age; &#125; String getName()&#123; return name; &#125; @Override public String toString() &#123; return &quot;Student&#123;&quot; + &quot;age=&quot; + age + &quot;, name=&#x27;&quot; + name + &#x27;\\&#x27;&#x27; + &#x27;&#125;&#x27;; &#125;&#125;public interface StudentBuilder &#123; Student build(int age,String name);&#125;public class Main &#123; public static void main(String[] args) &#123; useStudentBuilder((age,name) -&gt; new Student(age,name));//Lambda表达式 useStudentBuilder(Student::new);//引用类构造器 &#125; public static void useStudentBuilder(StudentBuilder sb) &#123; Student student = sb.build(18,&quot;孙悟空&quot;); System.out.println(student); &#125;&#125;/*Student&#123;age=18, name=&#x27;孙悟空&#x27;&#125;Student&#123;age=18, name=&#x27;孙悟空&#x27;&#125;*/ 函数式接口函数式接口指的是有且只有一个方法的接口 定义函数式接口加上注解@FunctionalInterface表示函数式接口 1234@FunctionalInterfacepublic interface Test &#123; void show();&#125; 若不加@FunctionalInterface，编译器不会检测接口是否是函数式接口，若加了，编译器会检测该接口是否只有一个方法。若接口只有一个方法时，加注解或者不加都表示函数式接口 import java.util.function包下自带的常用函数式接口 Supplier 123456789101112public class Main &#123; public static void main(String[] args) &#123; String s = getT(()-&gt;&quot;孙悟空&quot;); Integer age = getT(() -&gt; 18); System.out.println(s + age); &#125; public static &lt;T&gt; T getT(Supplier&lt;T&gt; supplier)&#123; return supplier.get(); &#125;&#125; Consumer 1234567891011121314151617181920212223242526272829303132333435@FunctionalInterfacepublic interface Consumer&lt;T&gt; &#123; void accept(T t); default Consumer&lt;T&gt; andThen(Consumer&lt;? super T&gt; after) &#123; Objects.requireNonNull(after); return (T t) -&gt; &#123; accept(t); after.accept(t); &#125;; &#125;&#125;public class Main &#123; public static void main(String[] args) &#123; operatorString(&quot;孙悟空&quot;, s -&gt; System.out.println(s), s -&gt; System.out.println(new StringBuilder(s).reverse())); &#125; public static void operatorString(String name, Consumer&lt;String&gt; c1, Consumer&lt;String&gt; c2)&#123; c1.andThen(c2).accept(name); &#125;&#125;/*孙悟空空悟孙*//*c1.andThen(c2)相当于又创建了一个Consumer的实例对象consumer,该Consumer大致如下:public interface Consumer&#123; void accept(String t)&#123; accept(t);//该accept调用的是c1.accept(t); affter.accept(t);//该accept调用的是c2.accept(t); &#125;&#125;当consumer.accept(name)时，相当于执行了c1.accept(name)；c2.accept(name)； Predicate 1234pre.negate().test(t);pre.and(other).test(t);pre.or(other).test(t);pre.not(other).test(t); 函数式接口Function12345678910111213//Function&lt;T,R&gt; T为参数，R为该函数式接口的返回值public class Main &#123; public static void main(String[] args) &#123; Student student = function(&quot;孙悟空&quot;,Student::new); System.out.println(student); &#125; public static Student function(String name, Function&lt;String, Student&gt; fun)&#123; return fun.apply(name); &#125;&#125;/*Student&#123;name=&#x27;孙悟空&#x27;&#125;*/ Stream APIStream API提供的方法12345678910111213ArrayList&lt;String&gt; list = new ArrayList();list.add(&quot;张三&quot;);list.add(&quot;李四&quot;);list.add(&quot;王五&quot;);list.add(&quot;钱六&quot;);ArrayList&lt;String&gt; list1 = new ArrayList&lt;&gt;();list1.add(&quot;刘一&quot;);list1.add(&quot;陈二&quot;);list1.add(&quot;孙七&quot;);list1.add(&quot;周八&quot;);list1.add(&quot;张三&quot;); foreach(Comsumer comsumer)遍历流中的元素 filter(Predicate predicate)过滤元素 12list.stream().filter(s -&gt;s.startsWith(&quot;张&quot;)).forEach(System.out::println);// 张三 limit(long maxSize)截取[0,maxSize)的元素 123list.stream().limit(2).forEach(System.out::println);// 张三// 李四 skip(long n)跳过索引为[0,n)以前的元素 123list.stream().skip(2).forEach(System.out::println);// 王五// 钱六 concat(Stream s1,Stream s2)将两个流合并 1234567891011Stream.concat(list1.stream(),list.stream()).forEach(System.out::println);// 刘一// 陈二// 孙七// 周八// 张三// 张三// 李四// 王五// 钱六 distinct()去除重复元素 123456789Stream.concat(list1.stream(),list.stream()).distinct().forEach(System.out::println);////去除// 刘一// 陈二// 孙七// 周八// 张三// 李四// 王五// 钱六 sorted()按自然排序排序流中的元素 12345list.stream().sorted().forEach(System.out::println);// 张三// 李四// 王五// 钱六 sorted(Comparator comparator)按比较器排序流中的元素 12345678910list.stream().sorted(new Comparator&lt;String&gt;() &#123; @Override public int compare(String o1, String o2) &#123; return o2.compareTo(o1); &#125;&#125;).forEach(System.out::println);// 钱六// 王五// 李四// 张三 map(Function func)按照函数的映射关系操作，结果存储在返回的流中 12345678910ArrayList&lt;String&gt; list = new ArrayList();list.add(&quot;0&quot;);list.add(&quot;1&quot;);list.add(&quot;2&quot;);list.add(&quot;3&quot;);list.stream().map(Integer::parseInt).forEach(System.out::println);// 0// 1// 2// 3 mapToInt(ToIntFunction mapper)该方法返回的流为IntStream 1list.stream().mapToInt(Integer::parseInt).forEach(System.out::println); sum()返回数值，结束流的操作 1int result = list.stream().mapToInt(Integer::parseInt).sum(); collect(Collector collector将流转化为Collection 1List&lt;String&gt; s = list.stream().collect(Collectors.toList()); 异常异常体系12345graph TDTrowable--&gt;Eorror --&gt;问题严重,处理不了Trowable--&gt;ExceptionException--&gt;RumtimeException --&gt;可以预见的异常,在运行时处理Exception--&gt;非RumtimeException --&gt;编译前就必须处理,编译器会自动检测 异常处理 如果不人为处理，Jvm会默认处理 抛出异常，给出异常原因 停止运行程序 人为处理 123456try&#123; //可能会发生异常的代码&#125;catch(ExceptionType e)&#123; e.printStackTrace();//打印异常信息 //处理发生异常&#125; 123456789101112131415161718192021222324252627public class Main &#123; public static void main(String[] args) &#123; int[] a = &#123;1,2,3&#125;; try &#123; System.out.println(a[3]); &#125;catch (ArrayIndexOutOfBoundsException e)&#123; System.out.println(e.getMessage()); System.out.println(e.toString()); e.printStackTrace(); &#125; System.out.println(&quot;结束&quot;); &#125;&#125;/*输出:=====================Index 3 out of bounds for length 3java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3=====================结束java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3 at test.Main.main(Main.java:15)Process finished with exit code 0 */ ​ java的异常提示包括两部分: 异常类型 异常信息 1234e.getMessage() -&gt;&quot;Index 3 out of bounds for length 3&quot;e.toString() -&gt; &quot;java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3&quot;e.printStackTrace() -&gt; &quot;java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3 at test.Main.main(Main.java:15)&quot; 当无权限处理或不知道如何处理时可用throws抛出异常，留给方法调用者处理 12345public static void test() throws FileNotFoundException &#123; File file; FileReader fileReader = new FileReader(&quot;test.png&quot;);&#125; 自定义异常自定义异常需要继承Exception或RumtimeException 123456789101112131415161718192021222324252627282930313233//自定义异常public class TestException extends Exception&#123; TestException()&#123; &#125; TestException(String message)&#123; super(message); &#125;&#125;//使用自定义异常public class Main &#123; public static void main(String[] args) &#123; try &#123; test(); &#125; catch (TestException e) &#123; e.printStackTrace(); &#125; &#125; public static void test() throws TestException &#123; //code ... if (true)&#123; throw new TestException(&quot;测试代码有问题!&quot;); &#125; &#125;&#125;/*est.TestException: 测试代码有问题! at test.Main.test(Main.java:23) at test.Main.main(Main.java:14)*/ 集合集合体系 CollectionCollection常用方法 方法 方法描述 boolean add(E e) 添加一个元素 boolean remove(Object o) 删除集合中指定元素o void clear() 删除集合中所有元素 boolen isEmpty() 判断集合是否为空 int size() 返回集合中元素个数 boolean contains(Object o) 判断集合中是否包含元素o Iterator iterator() 返回此集合中的元素的迭代器。 default stream() 返回以此集合作为源的顺序 Stream 。 Object toArray() 返回一个包含此集合中所有元素的数组。 boolean addAll(Collection&lt;? extends E&gt; c) 将集合c中的所有元素添加到此集合。 boolean containsAll(Collection&lt;?&gt; c) 判断集合c是否为此集合的字迹 boolean removeAll(Collection&lt;?&gt; c) 删除此集合与集合c的交集 Collection的遍历 使用迭代器遍历 12345678910Collection&lt;String&gt; collection = new ArrayList&lt;&gt;();collection.add(&quot;hello&quot;);collection.add(&quot;world&quot;);collection.add(&quot;javaee&quot;);Iterator&lt;String&gt; iterator = collection.iterator();while (iterator.hasNext())&#123; String s = iterator.next(); System.out.println(s);&#125; 使用增强for循环遍历 123for (String s : collection)&#123; System.out.println(s);&#125; 并发修改异常 123456Iterator&lt;String&gt; iterator = collection.iterator();while (iterator.hasNext())&#123; String next = iterator.next(); collection.add(&quot;hello&quot;); System.out.println(next);&#125; 1234for (String s : collection)&#123; System.out.println(s); collection.add(&quot;ppt&quot;);&#125; 123Exception in thread &quot;main&quot; java.util.ConcurrentModificationException at java.base/java.util.ArrayList$Itr.checkForComodification(ArrayList.java:1013) at java.base/java.util.ArrayList$Itr.next(ArrayList.java:967) 注:使用迭代器遍历集合时增减集合元素会造成并发修改异常,增强for循环的本质也是迭代器遍历，所以同样也会造成该异常 List特点： 有序 可重复 可向指定位置插入元素 可访问指定位置元素 | 方法 | 方法描述 || ————————————- | —————————————————- || void add(int index,E e) | 在指定位置添加元素 || E remove(int index) | 删除指定位置元素 || E set(int index,E e) | 修改指定位置的元素,返回被修改的元素 || E get(int index) | 返回指定位置的元素 | List的遍历除了通过迭代器遍历和增强for循环遍历外(同Collection的遍历),还可以通过索引遍历: 123for (int i = 0;i &lt; list.size();i++)&#123; System.out.println(list.get(i));&#125; 注:使用迭代器遍历List时增减元素会造成并发修改异常，使用列表迭代器ListIterator List的实现 ArrayList数组实现,查询快,增删慢 LinkList链表实现(Deque双端队列),查询慢,增删块 LinkList特有的方法: |方法 | 描述 || ———————- | ———————————————— || void addFirst(E e) | 在该列表开头插入指定的元素 || void addLast(E e) | 将指定的元素追加到此列表的末尾 || E getFirst() | 返回此列表中的第一个元素 || E getLast() | 返回此列表中的最后一个元素 || E removeFirst() | 从此列表中删除并返回第一个元素 || E removeLast() | 从此列表中删除并返回最后一个元素 | Set特点: 无序 不重复 哈希值12345System.out.println(&quot;hello&quot;.hashCode());//99162322System.out.println(&quot;文字&quot;.hashCode());//829104System.out.println(&quot;重地&quot;.hashCode());//1179395System.out.println(&quot;通话&quot;.hashCode());//1179395System.out.println(new Object().hashCode());//295530567 一般的,相同的对象哈希值相同,不同的对象哈希值不同,如果发生哈希冲突就会造成不同对象哈希值相同. Map… IO流File 构造方法 描述 File(File parent, String child) 从父抽象路径名和子路径名字符串创建新的File实例。 File(String pathname) 通过将给定的路径名字符串转换为抽象路径名来创建新的File实例。 File(String parent, String child) 从父路径名字符串和子路径名字符串创建新的File实例。 创建File对象1File file = new File(&quot;test.txt&quot;); 对象的使用12345678910111213141516171819//如果该目录下有test.txt返回false,如果没有，则创建文件,并返回trueFile file0 = new File(&quot;D:/test.txt&quot;);System.out.println(file0.createNewFile());//如果有该目录并且该目录没有该文件，则创建文件并返回true否则抛出异常 `java.io.IOException: 系统找不到指定的路径。`File file1 = new File(&quot;D:/Hello/test.txt&quot;);System.out.println(file1.createNewFile());//如果没有该目录且父目录存在.则创建目录返回true,否则返回falseFile file2 = new File(&quot;D:/World&quot;);System.out.println(file2.mkdir());//如果目录目录存在，则返回false,不存在则递归创建目录File file3 = new File(&quot;D:/Hello/World&quot;);System.out.println(file3.mkdirs());//该方法会装甲world.txt的目录，创建文件和目录只和调用的方法有关和文件路径无关File file4 = new File(&quot;D:/Hello/world.txt&quot;);System.out.println(file4.mkdir()); File类常用方法 方法 描述 boolean isDirectory() 判断是否为目录 boolean isFile() 判断是否为文件 boolean exists() 判断文件是否存在 String getAbsolutePath() 获取绝对路径 String getParant() 获取父路径 String getName() 获取文件名 String[] list() 获取抽象路径所表示的目录下所有文件或目录的名称组成的数组 File[] listFiles() 获取抽象路径所表示的目录下所有文件或目录的File对象 boolean delete() 删除抽象路径所表示的文件或目录，当抽象路径表示目录时，必须先删除抽象路径下的文件才能删除该目录 IO流常用体系12345678910111213graph LRIO流 --&gt; 字符流 &amp; 字节流字符流 --&gt; Reader &amp; WriterReader --&gt; BufferedReader &amp; InputStreamReaderWriter --&gt; BufferedWriter &amp; OutputStreamWriterInputStreamReader --&gt; FileReaderOutputStreamWriter --&gt; FileWriter字节流 --&gt; InputStream &amp; OutputStreamInputStream --&gt; FileInputStream &amp; FilterInputStream &amp; ObjectInputStreamOutputStream --&gt; FileOutputStream &amp; FilterOutputStream &amp; ObjectOutputStreamFilterInputStream --&gt; BufferedInputStream &amp; DataInputStream FilterOutputStream --&gt; BufferedOutputStream &amp; DataOutputStream 字节流字节流写入数据 覆盖写 12FileOutputStream fos = new FileOutputStream(&quot;test.txt&quot;);fos.write(&quot;test&quot;.getBytes());//windows 写入换行 &quot;\\r\\n&quot; 追加写 12FileOutputStream fos = new FileOutputStream(&quot;test.txt&quot;,true);fos.write(&quot;test&quot;.getBytes()); 每次写一个字节 1void write(int b); 1fos.write(97);//write &#x27;a&#x27; 每次写多个字节 12void write(byte b[]);void write(byte b[], int off, int len); 12fos.write(&quot;test&quot;.getBytes());//write &quot;test&quot;fos.write(&quot;test&quot;.getBytest(),1,3);//write &quot;est&quot; 字节流读数据 每次读取一个字符 12FileInputStream fis = new FileInputStream(&quot;test.txt&quot;);int ch = fis.read();//当指针指到文件末尾时,ch == -1; 12BufferedInputStream bis = new BufferedInputStream(new FileInputStream(&quot;test.txt&quot;));int ch = bis.read(); 每次读取多个字符 123FileInputStream fis = new FileInputStream(&quot;test.txt&quot;);byte[] bytes = new byte[1024];int len = fis.read(bytes);//返回值为真实的读取字节数组的长度 123BufferedInputStream bis = new BufferedInputStream(new FileInputStream(&quot;test.txt&quot;));byte[] bytes = new byte[1024];int len = bis.read(bytes) 拷贝文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768public interface Timer &#123; void run() throws IOException;&#125;public class Main &#123; public static void main(String[] args) throws IOException &#123; time(&quot;一次读一个字节&quot;,() -&gt; &#123; FileInputStream fis = new FileInputStream(&quot;test.mp4&quot;); FileOutputStream fos = new FileOutputStream(&quot;copy1-test.mp4&quot;); int ch; while ((ch = fis.read()) != -1) &#123; fos.write(ch); &#125; fis.close(); fos.close(); &#125;); time(&quot;一次多个字节&quot;,() -&gt;&#123; FileInputStream fis = new FileInputStream(&quot;test.mp4&quot;); FileOutputStream fos = new FileOutputStream(&quot;copy2-test.mp4&quot;); byte[] bytes = new byte[1024]; int ch ; while ((ch = fis.read(bytes)) != -1) &#123; fos.write(bytes); &#125; fis.close(); fos.close(); &#125;); time(&quot;字符缓冲流一次一个字节&quot;,()-&gt;&#123; BufferedInputStream bis = new BufferedInputStream( new FileInputStream(&quot;test.mp4&quot;)); BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(&quot;copy3-test.mp4&quot;)); int ch; while((ch = bis.read()) != -1)&#123; bos.write(ch); &#125; bis.close(); bos.close(); &#125;); time(&quot;字符缓冲流一次读多个字节&quot;,()-&gt;&#123; BufferedInputStream bis = new BufferedInputStream( new FileInputStream(&quot;test.mp4&quot;)); BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(&quot;copy4-test.mp4&quot;)); int len; byte[] bytes = new byte[1024]; while((len = bis.read(bytes)) != -1)&#123; bos.write(bytes,0,len); &#125; bis.close(); bos.close(); &#125;); &#125; static void time(String name,Timer timer) throws IOException &#123; long start = System.currentTimeMillis(); timer.run(); long end = System.currentTimeMillis(); System.out.println(&quot;%s 耗时:%d ms&quot;.formatted(name ,end - start)); &#125;&#125;/*输出：一次读一个字节 耗时:20573 ms一次多个字节 耗时:16 ms字符缓冲流一次一个字节 耗时:156 ms字符缓冲流一次读多个字节 耗时:15 ms*/ 字符流字符流读数据 一次读一个字符 123InputStreamReader isr = new InputStreamReader(new FileInputStream(&quot;test.txt&quot;),&quot;UTF-8&quot;);//未指定编码默认为平台编码int ch = isr.read();System.out.print((char)ch); 12BufferedReader br = new BufferedReader(new FileReader(&quot;test.txt&quot;));int ch = br.read(); 一次读多个字符 12345InputStreamReader isr = new InputStreamReader(new FileInputStream(&quot;test.txt&quot;),&quot;UTF-8&quot;);char[] chars = new char[1024];int len = isr.read(chars);System.out.println(new String(chars,0,len)); 123BufferedReader br = new BufferedReader(new FileReader(&quot;test.txt&quot;));char[] chars = new char[1024];int len = br.read(chars); 字符流写数据1234void write(int c);//写一个字节void write(char cbuf[]);//写一个字符数组void write(char cbuf[],int off,int len);//写一个字符数组[oof,oof+len);void write(String s);//写一个字符串 拷贝文本123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354public class Main &#123; public static void main(String[] args) throws IOException &#123; time(&quot;一次写一个字符&quot;,()-&gt;&#123; FileWriter fw = new FileWriter(&quot;copy1-test.txt&quot;); FileReader fr = new FileReader(&quot;test.txt&quot;); int ch; while ((ch = fr.read()) != -1)&#123; fw.write(ch); &#125; &#125;); time(&quot;一次写一个字符数组&quot;,()-&gt;&#123; FileWriter fw = new FileWriter(&quot;copy2-test.txt&quot;); FileReader fr = new FileReader(&quot;test.txt&quot;); char[] chars = new char[1024]; int len; while ((len = fr.read(chars)) != -1)&#123; fw.write(chars); &#125; &#125;); time(&quot;字符缓冲流一次写一个字符&quot;,()-&gt;&#123; FileWriter fw = new FileWriter(&quot;copy3-test.txt&quot;); FileReader fr = new FileReader(&quot;test.txt&quot;); BufferedReader br = new BufferedReader(fr); BufferedWriter bw = new BufferedWriter(fw); int ch; while ((ch = br.read()) != -1)&#123; bw.write(ch); &#125; &#125;); time(&quot;字符缓冲流一次写一个字符数组&quot;,()-&gt;&#123; FileWriter fw = new FileWriter(&quot;copy4-test.txt&quot;); FileReader fr = new FileReader(&quot;test.txt&quot;); BufferedReader br = new BufferedReader(fr); BufferedWriter bw = new BufferedWriter(fw); char[] chars = new char[1024]; int len; while ((len = br.read(chars)) != -1)&#123; bw.write(chars); &#125; &#125;); &#125; static void time(String name,Timer timer) throws IOException &#123; long start = System.currentTimeMillis(); timer.run(); long end = System.currentTimeMillis(); System.out.println(&quot;%s 耗时:%d ms&quot;.formatted(name ,end - start)); &#125;&#125; 流异常处理123456789101112131415161718FileOutputStream fos = null;try &#123; fos = new FileOutputStream(&quot;test.txt&quot;,true); fos.write(&quot;test&quot;.getBytes());&#125; catch (FileNotFoundException e) &#123; e.printStackTrace();&#125; catch (IOException e) &#123; e.printStackTrace();&#125;finally &#123; if (fos != null)&#123; try &#123; fos.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 上述方法过于复杂,可以使用如下方法,该方法可以将流自动关闭 12345678try( FileOutputStream fos = new FileOutputStream(&quot;test.txt&quot;)) &#123; fos.write(&quot;test&quot;.getBytes());&#125; catch (FileNotFoundException e) &#123; e.printStackTrace();&#125; catch (IOException e) &#123; e.printStackTrace();&#125; 存取对象12345678910111213141516171819202122232425262728293031323334public class Student implements Serializable &#123; private String name; private int age; Student()&#123;&#125; Student(String name,int age)&#123; this.name = name; this.age = age; &#125; public void setAge(int age) &#123; this.age = age; &#125; public int getAge() &#123; return age; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getName() &#123; return name; &#125; @Override public String toString() &#123; return &quot;Student&#123;&quot; + &quot;name=&#x27;&quot; + name + &#x27;\\&#x27;&#x27; + &quot;, age=&quot; + age + &#x27;&#125;&#x27;; &#125;&#125; 对象序列化 如果一个对象需要被写入文件，可以让这个对象实现Serializable接口 1234ObjectOutputStream oss = new ObjectOutputStream(new FileOutputStream(&quot;student.txt&quot;));Student student = new Student(&quot;孙悟空&quot;,18);oss.writeObject(student);oss.close(); 如果一个对象的属性不限被序列化,使用transient关键字 1private transient int age; 对象反序列化 12345ObjectInputStream ois = new ObjectInputStream(new FileInputStream(&quot;student.txt&quot;));Object obj = ois.readObject();Student student = (Student)obj;System.out.println(student);//Student&#123;name=&#x27;孙悟空&#x27;, age=18&#125; 使用transient关键字修饰后 1//Student&#123;name=&#x27;孙悟空&#x27;, age=0&#125; 当序列化后的的对象被修改时，反序列化会抛出异常java.io.InvalidClassException 如果想然被修改后的对象反序列化抛出异常，可以使用serialVersionUID指定序列化id值（建议使用private修饰，必须使用static final修饰） 1private static final long serialVersionUID = 42L; 注解注解是java中放在源代码的类，方法，注释，属性等之前的一种特殊的注释 注释不能被编译器读取 注解可以被编译器读取 元注解元注解是用于修饰注解的注解 @Target 说明一个注解的使用范围，如在类、方法、属性等 @Retention 说明该注解的生命周期 (SOURCE &lt; CLASS &lt; RUNTIME）默认值CLASS该注解不会被正在运行的程序读取 @Documented 说明该注解会被包含在javadoc中 @Inherited 说明子类可以继承该注解 自定义注解 定义注解中的字段时，应该采用:类型名 字段名()的形式定义 可以为字段指定默认值，若不指定默认值，则在使用时必须为字段赋值 1234567891011121314151617181920@Documented@Inherited@Target(value = &#123;ElementType.METHOD,ElementType.FIELD&#125;)@Retention(value = RetentionPolicy.RUNTIME)@interface MyAnnotation1 &#123; String methodName() ; int id() default -1;&#125;public class Test&#123; @MyAnnotation1(methodName = &quot;print&quot;) void print()&#123; &#125;&#125;//或者public class Test&#123; @MyAnnotation1(methodName = &quot;print&quot;,id = 1) void print()&#123; &#125;&#125; 若自定义的注解只有一个字段，该字段可以用value表示，使用该注解时，可以不用显示指定的字段名称，若不使用value表示该字段，则必须显示指出字段名称 1234567891011121314@Documented@Inherited@Target(value = &#123;ElementType.METHOD,ElementType.FIELD&#125;)@Retention(value = RetentionPolicy.RUNTIME)@interface MyAnnotation2 &#123; String value();&#125;//使用public class Test&#123; @MyAnnotation2(&quot;print&quot;) void print()&#123; &#125;&#125; 内置注解 @Override该注解用于修饰方法，表示被修饰的方法将重写超类的方法 @Deprecated该注解用于修饰过时的方法、属性和类，表示不建议程序员使用该方法、属性和类， @SuppressWarnings用于抑制编译警告 反射类加载当程序需要某个类且该类在内存中时，jvm会通过类的加载、类的连接、类的初始化三个步骤对类进行初始化。 类加载 将class文件读入内存，并为之创建对象 类连接 验证阶段：验证被加载的类是否有正确的内部结构 准备阶段：为类的变量分配内存，设置默认初始值 解析阶段：将类的二进制符号引用替换为直接引用 类初始化 初始化步骤： 假如类还未被加载和连接，则程序先加载并连接该类 假如该类的直接父类还未被初始化，则先初始化其直接父类（所以每次Object类先被初始化） 假如类中有初始化语句，则系统依次执行这些初始化语句 可以初始化类的时机： 创建类的实例 调用类的类方法 访问类或者接口的类变量，或者为该类变量赋值 使用反射方式来强制创建某个类或接口对应的java.lang.Class对象 初始化某个类的子类 直接使用java.exe命令来运行某个主类 类加载器JVM的类加载机制 全盘负责：就是当一个类加载器负责加载某个Class时，该Class所依赖的和引用的其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入 父类委托：就是当一个类加载器负责加载某个Class时，先让父类加载器试图加载该Class，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类 缓存机制：保证所有加载过的Class都会被缓存，当程序需要使用某个Class对象时，类加载器先从缓存区中搜索该Class，只有当缓存区中不存在该Class对象时，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存储到缓存区日 类加载器Java运行时具有以下内置类加载器： Bootstrap class loader。它是虚拟机的内置类加载器，通常表示为null，并且没有父null。 Platform class loader。平台类加载器可以看到所有平台类 ，可以将其用作ClassLoader实例的父ClassLoader。平台类包括由平台类加载器或其祖先定义的Java SE平台API，其实现类和JDK特定的运行时类。 System class loader。它也被称为应用程序类加载器，与平台类加载器不同。系统类加载器通常用于定义应用程序类路径，模块路径和JDK特定工具上的类。 Bootstrap是Platform的父类，Platform是System的父类 123456789101112131415ClassLoader c1 = ClassLoader.getSystemClassLoader();System.out.println(c1);ClassLoader c2 = c1.getParent();System.out.println(c2);ClassLoader c3 = c2.getParent();System.out.println(c3);//$AppClassLoader//$PlatformClassLoader//null//null//$AppClassLoader 类初始化 类的主动引用（一定会发生类的初始化） 当虚拟机启动，先初始化main方法所在的类 new一个类的对象 调用类的静态成员（除了final常量）和静态方法 使用java.lang.reflect包的方法对类进行反射调用 当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类 类的被动引用（不会发生类的初始化） 当访问一个静态域时，只有真正声明这个域的类才会被初始化。如：当通过子类引用父类的静态变量不会导致子类初始化 通过数组定义类引用，不会触发此类的初始化 引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了） 反射获取类的信息获取Class类的对象 一个类在内存中只有一个Class对象 一个类被加载后整个结构都被封装在内存中 12345678910111213141516171819202122232425public class Main &#123; public static void main(String[] args) throws ClassNotFoundException &#123; //通过类获得 Class&lt;Student&gt; c1 = Student.class; System.out.println(c1); Class&lt;Student&gt; c2 = Student.class; System.out.println(c1 == c2); //通过类的实例对象获得 Student c3 = new Student(); System.out.println(c3.getClass() == c1); //通过反射获取类的对象 Class&lt;?&gt; c4 = Class.forName(&quot;test.Student&quot;); System.out.println(c4 == c1); &#125;&#125;//class test.Student//true//true//true 123456789101112Class c1 = Object.class;//class java.lang.ObjectClass c2 = Comparable.class;//interface java.lang.ComparableClass c3 = String.class;//class java.lang.StringClass c4 = String[].class;//class [Ljava.lang.String;Class c5 = int.class;//intClass c6 = int[][].class;//class [[IClass c7 = Integer.class;//class java.lang.IntegerClass c8 = Override.class;//interface java.lang.OverrideClass c9 = ElementType.class;//class java.lang.annotation.ElementTypeClass c10 = void.class;//voidClass c11 = Class.class;//class java.lang.Class 获取类的成员 方法 描述 Field[] getFields() 获取该类所有共有属性 Field[] getDeclaredFields() 获取该类所有的属性 Field getField() 获取该类指定的共有属性 Field getDeclaredField() 获取该类指定的属性 Method[] getMethods() 获取该类的所有共有方法，包括从父类继承来的方法 Method[] getDeclaredMethods() 获取该类的所有方法 Method getMethod() 获取该类指定的共有方法 Method getDeclaredMethod() 获取该类指定的方法 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374public class Main &#123; public static void main(String[] args) throws ClassNotFoundException &#123; //通过反射获取类的对象 Class&lt;?&gt; aClass = Class.forName(&quot;test.Student&quot;); //获取所有共有属性 for (Field field : aClass.getFields()) &#123; System.out.println(field); &#125; System.out.println(&quot;=======================&quot;); //获取所有属性 for (Field declaredField : aClass.getDeclaredFields()) &#123; System.out.println(declaredField); &#125; System.out.println(&quot;=======================&quot;); //获取指定共有属性 System.out.println(aClass.getField(&quot;id&quot;)); System.out.println(&quot;=======================&quot;); //获取指定属性 System.out.println(aClass.getDeclaredField(&quot;name&quot;)); System.out.println(&quot;=======================&quot;); //获取共有方法，包括父类的方法 for (Method method : aClass.getMethods()) &#123; System.out.println(method); &#125; System.out.println(&quot;=======================&quot;); //获取所有方法，不包括父类 for (Method declaredMethod : aClass.getDeclaredMethods()) &#123; System.out.println(declaredMethod); &#125; //获取指定共有方法 System.out.println(aClass.getMethod(&quot;getName&quot;)); System.out.println(&quot;=======================&quot;); //获取指定方法 System.out.println(aClass.getDeclaredMethod(&quot;getId&quot;)); System.out.println(&quot;=======================&quot;);&#125;/*public java.lang.String test.Student.id=======================private java.lang.String test.Student.nameprivate int test.Student.agepublic java.lang.String test.Student.id=======================public java.lang.String test.Student.id=======================private java.lang.String test.Student.name=======================public java.lang.String test.Student.getName()public void test.Student.setName(java.lang.String)public void test.Student.setAge(int)public int test.Student.getAge()public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedExceptionpublic final void java.lang.Object.wait() throws java.lang.InterruptedExceptionpublic final native void java.lang.Object.wait(long) throws java.lang.InterruptedExceptionpublic boolean java.lang.Object.equals(java.lang.Object)public java.lang.String java.lang.Object.toString()public native int java.lang.Object.hashCode()public final native java.lang.Class java.lang.Object.getClass()public final native void java.lang.Object.notify()public final native void java.lang.Object.notifyAll()=======================public java.lang.String test.Student.getName()public void test.Student.setName(java.lang.String)private java.lang.String test.Student.getId()public void test.Student.setAge(int)public int test.Student.getAge()public java.lang.String test.Student.getName()=======================private java.lang.String test.Student.getId()=======================*/ 获取类的构造器 方法 描述 Constructor getConstructor() 获取指定共有构造器（通过参数类型确认构造器）,私有构造器无法获取 Constructor getDeclaredConstructor() 获取指定构造器（通过参数类型确认构造器） Constructor[] getConstructors() 获取所有共有构造器 Constructor[] getDeclaredConstructor() 获取所有构造器 123456789101112131415161718192021222324252627//通过反射获取类的对象Class&lt;?&gt; aClass = Class.forName(&quot;test.Student&quot;);//获取指定共有构造器Constructor&lt;?&gt; constructor1 = aClass.getConstructor();System.out.println(constructor1);System.out.println(&quot;=====================&quot;);//获取指定构造器Constructor&lt;?&gt; constructor2 = aClass.getDeclaredConstructor(String.class,int.class,String.class);System.out.println(constructor2);System.out.println(&quot;=====================&quot;);for (Constructor&lt;?&gt; constructor : aClass.getConstructors()) &#123; System.out.println(constructor);&#125;System.out.println(&quot;=====================&quot;);for (Constructor&lt;?&gt; constructor : aClass.getDeclaredConstructors()) &#123; System.out.println(constructor);&#125;/*public test.Student()=====================private test.Student(java.lang.String,int,java.lang.String)=====================public test.Student()=====================public test.Student()private test.Student(java.lang.String,int,java.lang.String)*/ 通过构造器创建对象 1234567891011121314151617//通过反射获取类的对象Class&lt;?&gt; aClass = Class.forName(&quot;test.Student&quot;);//使用无参构造器创建对象Student s1 = (Student)aClass.newInstance();System.out.println(s1);Constructor&lt;?&gt; c1 = aClass.getConstructor();Student s2 = (Student)c1.newInstance();System.out.println(s2);//使用有参构造器创建对象// Constructor&lt;?&gt; c2 = aClass.getConstructor(String.class,int.class,String.class);//当构造器为私有时无法使用// Student s3 = (Student) c2.newInstance(&quot;孙悟空&quot;, 18, &quot;110&quot;);// System.out.println(s3);Constructor&lt;?&gt; c3 = aClass.getDeclaredConstructor(String.class,int.class,String.class);c3.setAccessible(true);//设置安全模式为不检查，若不设置，构造器为私有时无法使用Student s4 = (Student) c3.newInstance(&quot;孙悟空&quot;, 18, &quot;110&quot;);System.out.println(s4); 操作对象的成员当对象的成员为私有时，直接创建的对象无法直接操作私有成员，但可以使用反射创建的对象操作该成员，需要为该成员设置setAccessible(true)后就可以字节操作，该方法可以启用和禁用安全检测（true表示关闭，false表示开启），关闭安全检测后，使用反射会更快 123456789101112131415161718192021222324252627Class&lt;?&gt; aClass = Class.forName(&quot;test.Student&quot;);//使用无参构造器创建对象Student s1 = (Student)aClass.newInstance();//一般方法操共有方法和属性s1.setName(&quot;孙悟空&quot;);s1.setAge(18);s1.id = &quot;110&quot;;System.out.println(s1);//反射操作所有方法和属性//使用共有方法Method setAge = aClass.getDeclaredMethod(&quot;setAge&quot;, int.class);setAge.invoke(s1,18);//设置私有属性值Field name = aClass.getDeclaredField(&quot;name&quot;);name.setAccessible(true);name.set(s1,&quot;孙悟空&quot;);//使用私有方法Method setName = aClass.getDeclaredMethod(&quot;setId&quot;, String.class);setName.setAccessible(true);setName.invoke(s1,&quot;110&quot;);System.out.println(s1); 反射与泛型1234567891011121314151617181920212223242526272829303132public class Main &#123; public void test1(Map&lt;String,Student&gt; map, List&lt;Student&gt; list)&#123; System.out.println(&quot;test1&quot;); &#125; public Map&lt;String, Student&gt; test2()&#123; System.out.println(&quot;test02&quot;); return null; &#125; public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123; Class&lt;?&gt; aClass = Class.forName(&quot;test.Main&quot;); Method test1 = aClass.getMethod(&quot;test1&quot;, Map.class, List.class); for (Type genericParameterType : test1.getGenericParameterTypes()) &#123; System.out.println(genericParameterType); if (genericParameterType instanceof ParameterizedType)&#123; for (Type actualTypeArgument : ((ParameterizedType) genericParameterType).getActualTypeArguments()) &#123; System.out.println(actualTypeArgument); &#125; &#125; &#125; System.out.println(&quot;======&quot;); Method test2 = aClass.getMethod(&quot;test2&quot;); Type genericReturnType = test2.getGenericReturnType(); if (genericReturnType instanceof ParameterizedType)&#123; Type[] actualTypeArguments = ((ParameterizedType) genericReturnType).getActualTypeArguments(); for (Type type:actualTypeArguments)&#123; System.out.println(type); &#125; &#125; &#125;&#125; 反射与注解12345678910111213141516171819202122232425public static void main(String[] args) throws ClassNotFoundException&#123; Class&lt;?&gt; aClass = Class.forName(&quot;test.Student&quot;); for (Field declaredField : aClass.getDeclaredFields()) &#123; if (declaredField.getDeclaredAnnotation(AnnotationField.class) instanceof AnnotationField)&#123; declaredField.setAccessible(true); AnnotationField declaredAnnotation = declaredField.getDeclaredAnnotation(AnnotationField.class); System.out.println(&quot;%s %s %d&quot;.formatted(declaredAnnotation.columnName() , declaredAnnotation.type(),declaredAnnotation.length())); &#125; &#125; System.out.println(&quot;===================&quot;); for (Method method : aClass.getDeclaredMethods()) &#123; if (method.getDeclaredAnnotation(AnnotationMethod.class) instanceof AnnotationMethod)&#123; method.setAccessible(true); AnnotationMethod declaredAnnotation = method.getDeclaredAnnotation(AnnotationMethod.class); System.out.println(declaredAnnotation); &#125; &#125;&#125;/**age int 2id varchar 10===================@test.AnnotationMethod(&quot;method&quot;)@test.AnnotationMethod(&quot;method&quot;)*/ 使用org.reflections.Reflections库批量扫描注解 123456789101112131415161718192021222324252627282930313233343536373839404142Set&lt;Field&gt; fieldsAnnotatedWith = new Reflections(&quot;test&quot;, Scanners.FieldsAnnotated) .getFieldsAnnotatedWith(AnnotationField.class);for (Field field:fieldsAnnotatedWith)&#123; System.out.println(field);&#125;System.out.println(&quot;================&quot;);Set&lt;Method&gt; methodsAnnotatedWith = new Reflections(&quot;test&quot;,Scanners.MethodsAnnotated) .getMethodsAnnotatedWith(AnnotationMethod.class);for (Method method:methodsAnnotatedWith)&#123; System.out.println(method);&#125;System.out.println(&quot;================&quot;);Set&lt;Class&lt;?&gt;&gt; typesAnnotatedWith = new Reflections(&quot;test&quot;,Scanners.TypesAnnotated) .getTypesAnnotatedWith(AnnotationTable.class);for (Class&lt;?&gt; c: typesAnnotatedWith)&#123; System.out.println(c);&#125;System.out.println(&quot;================&quot;);/*91 [main] INFO org.reflections.Reflections - Reflections took 74 ms to scan 1 urls, producing 1 keys and 3 valuesprivate java.lang.String test.Student.nameprivate int test.Student.agepublic java.lang.String test.Student.id================113 [main] INFO org.reflections.Reflections - Reflections took 11 ms to scan 1 urls, producing 1 keys and 6 values123 [main] INFO org.reflections.Reflections - Reflections took 6 ms to scan 1 urls, producing 3 keys and 6 valuespublic int test.Student.getAge()private java.lang.String test.Student.getId()public void test.Student.setName(java.lang.String)public java.lang.String test.Student.getName()public void test.Student.setAge(int)public void test.Student.setId(java.lang.String)================class test.Studentclass test.Teacher================*/ 使用该库需要准确告知扫描器类型，否则无法扫描 网络InetAddress类1234InetAddress byName = InetAddress.getByName(&quot;******&quot;);System.out.println(&quot;主机名:&quot;+byName.getHostName());System.out.println(&quot;ip地址:&quot;+byName.getHostAddress());System.out.println(byName); UDP通信练习1234567891011121314public class UDPSend &#123; public static void main(String[] args) throws IOException &#123; InetAddress inetAddress = InetAddress.getByName(&quot;hostIp&quot;); DatagramSocket ds = new DatagramSocket(); BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); String line; while ((line = br.readLine()) != null) &#123; DatagramPacket datagramPacket = new DatagramPacket(line.getBytes(),line.getBytes().length,inetAddress,8888);//指定数据报发送的地址和端口 ds.send(datagramPacket); &#125; &#125;&#125; 12345678910111213//接受数据并打印public class UDPReceive &#123; public static void main(String[] args) throws IOException &#123; DatagramSocket socket = new DatagramSocket(8888); byte[] bytes = new byte[1024]; while(true)&#123; DatagramPacket dp = new DatagramPacket(bytes,bytes.length ); socket.receive(dp); System.out.println(&quot;接受到:&quot;+new String(dp.getData(),0,dp.getLength())); &#125; &#125;&#125; TCP通信练习12345678910111213public class TCPReceive &#123; public static void main(String[] args) throws IOException &#123; ServerSocket socket = new ServerSocket(8888); Socket s = socket.accept(); InputStreamReader reader = new InputStreamReader(s.getInputStream()); char[] bytes = new char[1024]; int len; while ( (len = reader.read(bytes)) != -1)&#123; System.out.println(new String(bytes,0,len)); &#125; &#125;&#125; 123456789101112131415public class TCPSend &#123; public static void main(String[] args) throws IOException &#123; Socket socket = new Socket(&quot;127.0.0.1&quot;,8888); BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in)); OutputStream outputStream = socket.getOutputStream(); String line = null; while ((line = bufferedReader.readLine()) != null) &#123; outputStream.write(line.getBytes()); outputStream.flush(); &#125; outputStream.close(); socket.close(); &#125;&#125; 并发多线程多进程 常用类线程安全对比 JDK版本 不执行同步，更快 执行同步，安全性高 JDK5 StringBuilder StringBuffer JDK2 ArrayList Vector JDK2 HashMap HashTable 问题汇总待解决问题 List.of()的重载有很多，有1~10个参数的重载，但明明有可变参数的重载为什么还要写那么多的重载 包名不能是jdk中的含有的包的名称 为什么Reflections库可以扫描到未被@Retention(RetentionPolicy.RUNTIME)修饰的注解 已解决问题 Error: A JNI error has occurred, please check your installation and try again","categories":[{"name":"Java","slug":"Java","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Java/"}],"tags":[],"keywords":[{"name":"Java","slug":"Java","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Java/"}]},{"title":"正则表达式","slug":"RegularExpression","date":"2022-03-08T13:28:55.601Z","updated":"2022-05-06T11:59:04.749Z","comments":true,"path":"2022/03/08/RegularExpression/","link":"","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/2022/03/08/RegularExpression/","excerpt":"本文介绍了正则表达式的常见知识点，并列举了正则表达式的方法。本文的知识点来自韩顺平的正则表达式讲解。","text":"本文介绍了正则表达式的常见知识点，并列举了正则表达式的方法。本文的知识点来自韩顺平的正则表达式讲解。 视频地址 正则表达式的概念使用单一的字符串模式描述或匹配一些列具有相同规则的字符串的一种公式。 正则表达式的使用转义符 注：在java的正则表达式中，转义符是\\\\,即两个\\相当于其他语言的一个\\ 匹配一个转义符 原字符串使用两个反斜杠表示一个反斜杠，模式串使用四个反斜杠匹配一个反斜杠 12str = &quot;hello\\\\world&quot;；pattern = &quot;\\\\\\\\&quot;;//前两个\\表示一个\\，即正常的转义符，后两个\\表示一个\\，后面的\\被前面的\\转义使其不再具有转义的功能，从而正常表达为\\，所以需要四个\\表示一个\\ 匹配两个转义符 原字符串使用四个反斜杠表示两个反斜杠，模式字符串使用八个反斜杠表示两个反斜杠 通常需要被转义的字符有： .*+()$/\\?[]^&#123;&#125; 字符匹配符字符匹配符即元字符，用于匹配一般字符的字符 符号 符号解释 示例 示例解释 [] 匹配中括号内的任意一个字符 [abcde] 可以匹配a,b,c,d,e中的任意一个字符 [^] 匹配除了^之后的任意一个字符 [^abcde] 可以匹配除了a,b,c,d,e中的任意字符 - 匹配连字符两端之间的任意一个字符 [a-e] 可以匹配从a到z之间的任意一个字符(包括a和e),相当于[abcde] . 匹配除了\\n以外的任意一个字符 a...e 可以匹配adase,adsee等，一个.表示任意一个除了\\n之外的字符 \\\\d 匹配单个数字字符 \\\\d 相当于[0-9] \\\\D 匹配单个非数字字符 \\\\D 相当于[^0-9] \\\\w 匹配单个数字、大小写字母、下划线 \\\\w 相当于[0-9a-zA-Z_] \\\\W 匹配单个非数字、大小写字母、下划线 \\\\W 相当于[^0-9a-zA-Z_] (?i) 不区分大小写匹配后面的字母 c(?i)abc 可以匹配cabc,cABC \\\\s 匹配任何空白字符 \\\\s 可以匹配空格，制表符等 \\\\S 匹配任何非空白字符 \\\\S 匹配任何可以显示的字符 注：若要使匹配字符串时大小写不敏感，还可以使用Pattern.compile(reStr,Pattern.CASE_INSENSITIVE)进行大小写不敏感匹配 []内的元字符表示字符本身的意思，不再具有特殊意义 选择匹配符 符号 符号解释 示例 示例解释 ` ` 选择匹配符，匹配符号左右两端任意一个模式串 `abc DEF` 可以匹配abc,或DEF 限定符 符号 符号解释 示例 示例解释 * 指定字符重复0次到n次 (abc)* 可以匹配空白字符,abc，abcabc,abcabcabc等 + 指定字符重复1次到n次 m+(abc)* 至少以一个m开头，0个或多个abc，可以匹配mabc,mabcabc,mmmabc等 ? 指定字符重复0次到1次 m?(abc)* 以0个或1个m开头，0个或多个abc，可以匹配abc,mabc,mabcabc,mmmabc等 &#123;n&#125; 指定n个前面字符 `a{3} [abc]{3}` 可以匹配aaa,abc，abb,bbb,ccc,abc,cba等 &#123;n,m&#125; 指定n到m个字符 &#123;n,&#125; 指定至少n个字符 {,m} 指定最多m个字符 贪婪匹配 java的匹配规则是贪婪匹配 12str = &quot;11111&quot;;pattern = &quot;1&#123;3,4&#125;&quot;; 则按照贪婪匹配原则，pattern将匹配 4个1而不是3个1 12str=&quot;1111111&quot;;pattern = &quot;&#123;3,4&#125;&quot;; 则按照贪婪匹配原则,pattern将先匹配 4个1,再匹配3个1 非贪婪匹配若想使用非贪婪匹配，只需在限定符后面加? 定位符 符号 符号解释 示例 示例解释 ^ 指定起始字符 ^[0-9]+ 匹配以0-9数字开头的字符如0a,1abc,111 $$` 指定结束字符 `[a-z]$$ 匹配以a-z结尾的字符023a,23b \\\\b 指定目标串的边界 abc\\\\b 可以匹配字符串abcddd dddabc abcddd中的dddabc的abc \\\\B 指定目标串的非边界 捕获分组 捕获形式 说明 (pattern) 非命名捕获，捕获内容使用捕获的组号来获取 (?&lt;name&gt;pattern) 非捕获分组 123456789101112131415161718192021public class RegExp08 &#123; public static void main(String[] args) &#123; String content = &quot;在线学习 在线教育 在线玩游戏&quot;; //只匹配“在线学习”和“在线教育” String regStr = &quot;在线(?:学习|教育)&quot;;// //只匹配“在线学习”和“在线教育”的“在线”// String regStr = &quot;在线(?=学习|教育)&quot;;//// //只匹配“在线玩游戏”的在线// String regStr = &quot;在线(?!学习|教育)&quot;; Pattern pattern = Pattern.compile(regStr); Matcher matcher = pattern.matcher(content); while (matcher.find())&#123; System.out.println(matcher.group(0)); &#125; &#125;&#125; 反向引用圆括号内的内容被捕获后可以在圆括号后被使用，从而写出与圆括号内容相同的内容，这个方法被称为反向引用 123456789101112131415161718public class RegExp13 &#123; public static void main(String[] args) &#123; //获取五位数的回文串 String regStr = &quot;(\\\\d)(\\\\d)(\\\\d)\\\\2\\\\1&quot;; String content = &quot;123451232145654&quot;; Pattern pattern = Pattern.compile(regStr); Matcher matcher = pattern.matcher(content); while (matcher.find())&#123; System.out.println(matcher.group()); &#125; &#125;&#125;/**输出：1232145654*/ 1234567891011121314151617181920212223242526public class RegExp14 &#123; public static void main(String[] args) &#123; String content = &quot;我...我要...学学学...java&quot;; String s = &quot;\\\\.&quot;; String s1 = &quot;(.)\\\\1+&quot;; System.out.println(content); Pattern pattern = Pattern.compile(s); Matcher matcher = pattern.matcher(content); //将.号删除 content = matcher.replaceAll(&quot;&quot;); System.out.println(content); //将连续的重复字替换为一个 pattern = Pattern.compile(s1); matcher = pattern.matcher(content); content = matcher.replaceAll(&quot;$1&quot;); System.out.println(content); &#125;&#125;/**输出：我...我要...学学学...java我我要学学学java我要学java*/ 注：\\\\分组好为反向引用，在Pattern.compile()函数编译时使用，$分组号也为反向引用，在编译之后使用 正则表达式的分组原理获取分组模式串中，每一个()代表一个分组，分组从1开始，使用matcher.group(0)获取模式串匹配到的整个文本，使用matcher.group(1)获得第一个分组，使用matcher.group(1)获得第二个分组，依此类推。 matcher.group()源码123456789public String group(int group) &#123; if (first &lt; 0) throw new IllegalStateException(&quot;No match found&quot;); if (group &lt; 0 || group &gt; groupCount()) throw new IndexOutOfBoundsException(&quot;No group &quot; + group); if ((groups[group*2] == -1) || (groups[group*2+1] == -1)) return null; return getSubSequence(groups[group * 2], groups[group * 2 + 1]).toString(); &#125; 传入的参数group表示分组号，groups[]数组中存放着匹配到的分组的索引信息，groups[0]到groups[1]存放的是整个模式串匹配到的字符串的第一个字符到最后一个字符的索引，groups[group*2]到groups[group*2+1)]存放的是第group个分组的第一个和最后一个字符的索引。 正则表达式常用类及方法Pattern类Pattern.matches（regex,content）若模式串regex字符串content能够整体匹配，返回结果为true否则为false 12345678910public class RegExp11 &#123; public static void main(String[] args) &#123; String content = &quot;hello world&quot;; String regex1 = &quot;hello&quot;; String regex2 = &quot;hello.*&quot;; System.out.println(Pattern.matches(regex1, content));//false System.out.println(Pattern.matches(regex2, content));//true &#125;&#125; Matcher类matcher.start()和matcher.end()返回每次匹配到的字符开始和结束的索引 123456789101112131415161718192021222324public class RegExp12 &#123; public static void main(String[] args) &#123; String content = &quot;hello world hello&quot;; String regex1 = &quot;hello&quot;; Pattern pattern = Pattern.compile(regex1); Matcher matcher = pattern.matcher(content); while (matcher.find())&#123; System.out.println(matcher.start()); System.out.println(matcher.end()); System.out.println(content.substring(matcher.start(),matcher.end())); &#125; &#125;&#125;/**输出：05hello1217hello*/ matcher.matches() 也表示整体匹配，和Pattern.matches(regex,content)一样返回结果为boolean类型 matcher.replaceAll(replaceStr) 123456789101112131415161718public class RegExp12 &#123; public static void main(String[] args) &#123; String content = &quot;hello world hello&quot;; String regex1 = &quot;hello&quot;; Pattern pattern = Pattern.compile(regex1); Matcher matcher = pattern.matcher(content); String world = matcher.replaceAll(&quot;world&quot;); System.out.println(world); &#125;&#125;/**输出：world world world*/ 注：matcher.replaceAll（replaceStr）不替换原有的文本，而是拷贝后替换返回新的文本 String类中的正则表达式的使用1234567891011121314151617181920212223242526272829303132public class RegExp15 &#123; public static void main(String[] args) &#123; //relaceAll()方法 String content = &quot;hello world hi wolrd&quot;; content = content.replaceAll(&quot;hello|hi&quot;,&quot;你好&quot;); System.out.println(content); //matches()方法 String phone = &quot;13888888888&quot;; if (phone.matches(&quot;^1[3|4|5|7|8][0-9]&#123;9&#125;$&quot;))&#123; System.out.println(&quot;是电话号码！&quot;); &#125;else&#123; System.out.println(&quot;不是电话号码！&quot;); &#125; //split()方法 String splitStr = &quot;hello#world&amp;hi%wolrd&quot;; String[] split = splitStr.split(&quot;[#&amp;%]&quot;); for (String s : split)&#123; System.out.println(s); &#125; &#125;&#125;/**输出：你好 world 你好 wolrd是电话号码！helloworldhiwolrd*/","categories":[{"name":"Java","slug":"Java","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Java/"},{"name":"正则表达式","slug":"Java/正则表达式","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Java/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"}],"tags":[],"keywords":[{"name":"Java","slug":"Java","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Java/"},{"name":"正则表达式","slug":"Java/正则表达式","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/Java/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"}]},{"title":"算法笔记","slug":"algorithm","date":"2021-11-02T16:29:35.247Z","updated":"2022-05-06T11:59:04.351Z","comments":true,"path":"2021/11/03/algorithm/","link":"","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/2021/11/03/algorithm/","excerpt":"本文介绍了算法中常见的知识点和技巧，代码使用伪码或c++实现","text":"本文介绍了算法中常见的知识点和技巧，代码使用伪码或c++实现 数据类型 字符型 字符 字符串 数字型 整型 浮点型 bool型 bool值数据类型取值范围表 类型 位 范围 char 1 个字节 -128 到 127 或者 0 到 255 unsigned char 1 个字节 0 到 255 signed char 1 个字节 -128 到 127 int 4 个字节 -2147483648 到 2147483647 unsigned int 4 个字节 0 到 4294967295 signed int 4 个字节 -2147483648 到 2147483647 short int 2 个字节 -32768 到 32767 unsigned short int 2 个字节 0 到 65,535 signed short int 2 个字节 -32768 到 32767 long int 8 个字节 -9,223,372,036,854,775,808 到 9,223,372,036,854,775,807 signed long int 8 个字节 -9,223,372,036,854,775,808 到 9,223,372,036,854,775,807 unsigned long int 8 个字节 0 到 18,446,744,073,709,551,615 float 4 个字节 精度型占4个字节（32位）内存空间，+/- 3.4e +/- 38 (~7 个数字) double 8 个字节 双精度型占8 个字节（64位）内存空间，+/- 1.7e +/- 308 (~15 个数字) long double 16 个字节 长双精度型 16 个字节（128位）内存空间，可提供18-19位有效数字。 wchar_t 2 或 4 个字节 1 个宽字符 &lt;/details&gt; 符号定义 数学符号 定义 $\\pi$ #define P acos(-1.0) $\\varepsilon$ #define eps 1e-8 $+\\infty$ INF 对于unsigned int型#define INF 0xffffffff，对于int型#define INF 0x7fffffff，一般的问题 #define INF 0x3f3f3f3f 函数定义浮点数的比较12345678910111213141516171819202122232425//等于bool equal(double a,double b)&#123; return fabs(a-b) &lt; eps;&#125;//大于bool more(double a,double b)&#123; return (a-b) &gt; eps;&#125;//小于bool less(double a,double b)&#123; return (a-b) &lt; (-eps);&#125;//大于等于bool more_equal(double a,double b)&#123; return (a-b) &gt; (-eps);&#125;//小于等于bool less_equal(double a,double b)&#123; return (a-b) &lt; eps;&#125; 获取数组的长度1#define get_length(array) (sizeof(array) / sizeof(array[0])) 排序 注:排序算法，默认按升序排 冒泡排序 1234567891011//冒泡排序void bubble_sort(vector&lt;int&gt; &amp;array)&#123; int length = array.size(); for(int i = length;i &gt;= 0;--i)&#123; for (int j = 1; j &lt; i; ++j) &#123; if (array[j-1] &gt; array[j])&#123; swap(array[j-1],array[j]); &#125; &#125; &#125;&#125; 简单选择排序1234567891011121314//选择排序void select_sort(vector&lt;int&gt; &amp;array)&#123; int length = array.size(); for(int i = 0;i &lt; length - 1;++i)&#123; int min = i; for (int j = i+1; j &lt; i; ++j) &#123; if (array[i] &gt; array[j]) &#123; min = j; &#125; &#125; swap(array[i],array[min]); &#125;&#125; 插入排序 123456789101112131415//插入排序void insert_sort(vector&lt;int&gt; &amp;array)&#123; int length = array.size(); for(int i = 1;i &lt; length;++i)&#123; int current = array[i]; for(int j = i-1;j &gt;= 0;--j)&#123; if(array[j] &gt; current)&#123; array[j+1] = array[j]; &#125;else&#123; array[j+1] = current; break; &#125; &#125; &#125;&#125; 归并排序12345678910111213141516171819202122232425262728293031323334//归并排序void merge(vector&lt;int&gt; &amp;arr,int left,int mid,int right)&#123; int i = left,j = mid+1; int k = 0; vector&lt;int&gt; temp(right-left+1); while ((i &lt;= mid) &amp;&amp; (j &lt;= right)) &#123; if(arr[i] &lt;= arr[j])&#123; temp[k++] = arr[i++]; &#125;else&#123; temp[k++] = arr[j++]; &#125; &#125; while(j &lt;= right)&#123; temp[k++] = arr[j++]; &#125; while(i &lt;= mid)&#123; temp[k++] = arr[i++]; &#125; while(k &gt; 0)&#123; arr[--j] = temp[--k]; &#125;&#125;void merge_sort(vector&lt;int&gt; &amp;arr,int left,int right)&#123; if(left &lt; right)&#123; int mid = left + (right-left)/2; merge_sort(arr,left,mid); merge_sort(arr,mid+1,right); merge(arr,left,mid,right); &#125;&#125; 快速排序 1234567891011121314151617181920212223242526int partition(vector&lt;int&gt; &amp;arr,int left,int right)&#123; int i = left,j= right + 1; int temp = arr[i]; while(true)&#123; while(arr[++i] &lt; temp &amp;&amp; i &lt; right); while(temp &lt; arr[--j]); if(i &gt;= j)&#123; break; &#125; swap(arr[i],arr[j]); &#125; arr[left] = arr[j]; arr[j] = temp; return j;&#125;void quick_sort(vector&lt;int&gt; &amp;arr,int left,int right) &#123; if(left &lt; right)&#123; int base = partition(arr,left,right); quick_sort(arr,left,base-1); quick_sort(arr,base+1,right); &#125;&#125; 堆排序123456789101112131415graph TD1--&gt;21--&gt;32--&gt;42--&gt;53--&gt;63--&gt;74--&gt;84--&gt;95--&gt;105--&gt;116--&gt;126--&gt;137--&gt;147--&gt;15 桶排序基数排序计数排序递归贪心二分法二分查找123456789101112131415161718//查找x在有序数组arr中的索引，若不存在返回-1int binary_search(vector&lt;int&gt; arr,int x,int length)&#123; int left = 0; int right = length-1; while(left &lt;= right)&#123; int mid = (left + right)/2; if(arr[mid] &lt; x)&#123; left = mid + 1; &#125;else if(arr[mid] &gt; x)&#123; right = mid - 1; &#125;else&#123; return mid; &#125; &#125; return -1;&#125; 二分法求近似值$f(x) = x^3+x^2-4$， 求$f(x)=0$的近似解 12345678910111213141516double f(double x)&#123; return x*x*x + x*x - 4;&#125;double solve(double left,double right)&#123; while(1)&#123; double mid = left+(right-left)/2; if(equal(f(mid),0.0))&#123; return mid; &#125;else if(more(f(mid),0.0))&#123; right = mid; &#125;else&#123; left = mid; &#125; &#125;&#125; 快速幂整数快速幂对于任意的数$x$，都可以通过位运算将它化为多个2的幂的和的形式。例如: 100_{10} = 1100100_{2} = 2^2+2^5+2^6 \\\\ 753_{10} = 1011110001_2 = 2^9+2^7+2^6+2^5+2^4+2^0显然对于$2^n$，我们可以通过移位运算快速求得 2^n = 1","categories":[{"name":"算法","slug":"算法","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E7%AE%97%E6%B3%95/"}],"tags":[],"keywords":[{"name":"算法","slug":"算法","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/%E7%AE%97%E6%B3%95/"}]},{"title":"MySQL","slug":"MySQL","date":"2021-11-02T16:29:12.544Z","updated":"2022-05-06T11:59:04.694Z","comments":true,"path":"2021/11/03/MySQL/","link":"","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/2021/11/03/MySQL/","excerpt":"本文介绍了MySQL的基本知识点，收录了SQL学习和练习网站，收录了学习MySQL过程中常见的问题及解决办法","text":"本文介绍了MySQL的基本知识点，收录了SQL学习和练习网站，收录了学习MySQL过程中常见的问题及解决办法 MySQL学习教程 菜鸟教程 老杜带你学_mysql入门基础 MySQL官方参考手册 牛客在线练习 leetcode在线练习 MySQL常见问题乱码问题 查看字符编码1mysql&gt;show variables like &quot;character%&quot;; 设置字符编码12345msyql&gt;set character_set_client = utf8;msyql&gt;set character_set_connection = utf8;msyql&gt;set character_set_database = utf8;msyql&gt;set character_set_results = utf8;msyql&gt;set character_set_server = utf8; 注：这种方式设置的字符编码是临时的，MySQL重启后字符编码会恢复为默认值。 如果设置了字符编码存入数据库时还是乱码，则使用1mysql&gt;set names(&quot;UTF8&quot;)该语句等同于以下三条语句:123msyql&gt;set character_set_client = utf8;msyql&gt;set character_set_results = utf8;msyql&gt;set character_set_connection = utf8; 连接问题 连接数据库 登录指定服务器192.168.*.*: mysql -h 服务器ip -u 用户名 -p密码 12cmd&gt;mysql -h 192.168.*.* -uroot -ppassword:****** 登录默认服务器localhost: mysql -u用户名 -p密码: 12cmd&gt;mysql -uroot -ppassword:****** -p后面填写密码，但此密码填写时为明文，mysql不建议这么做，所以一般-p后面参数为空，提示password:后输入密码 退出数据库12mysql&gt;exitmysql&gt;quit 修改密码 1mysql&gt;update mysql.user set authertication_string=password(&quot;password&quot;) where user=&quot;username&quot; and Host=&quot;hostip&quot;; 常量与系统变量 常量常量包含字符串、数字、日期、bool值、null值等 系统变量系统变量可分为全局变量和会话变量，全局变量作用于MySQL服务器开启到结束用@@变量名表示，会话变量作用于会话连接开始到结束用@变量名表示 显示系统变量显示以a开头的系统变量 1mysql&gt;show variables like &quot;a%&quot; MySQL语法规范 不区分大小写，建议关键字大写，表名、列名小写 每条命令最好用分号结尾 每条命令根据需要可缩进换行 注释 ​ 单行注释： #注释文字 ​ 单行注释：-- 注释文字（有空格） ​ 多行注释：/*注释文字*/ MySQL常用命令符 查看当前数据库 1mysql&gt;show databases; 打开指定数据库 1mysql&gt;use databasename; 查看当前所有表 1mysql&gt;show tables; 查看其他库的所有表 1mysql&gt;show tables from datebasename; 注：当表名或库名为非正常字段时使用反引号将其包裹,比如当表名为某个关键字时，使用反引号将其包裹 创建表 12345create table 表名( 列名 列类型， 列名 列类型， ...); 查看服务器版本 方式一:登录到mysql服务端 1msyql&gt;select version(); 方式二:不登录mysql服务端 12cmd&gt;mysql --versioncmd&gt;msyql -V 注：这里的V是大写V 更改定界符 MySQL默认以输入定界符 ;后，将;以前的作为命令执行单元换成，MySQL提供了更改命令执行符的命令delimiter。 1mysql&gt;delimiter // 1234567mysql&gt; select version()//+-----------+| version() |+-----------+| 8.0.26 |+-----------+1 row in set (0.00 sec) MySQL数据类型 字符串型 CHAR VARCHAR TEXT 数字整型 TINYINT SMALLINT MEDIUMINT INT BIGINT 日期和时间型 DATE TIME DATETIME YEAR TIMESTAMP 数字二进制型 TINYBLOB TINYTEXT BLOB TEXT MEDIUMBLOB MEDIUMTEXT LONGBLOB LONGTEXT数据类型取值范围表 类型 字节大小 有符号范围 无符号范围 SMALLINT 2 bytes (-32 768，32 767) (0，65 535) MEDIUMINT 3 bytes (-8 388 608，8 388 607) (0，16 777 215) INT或INTEGER 4 bytes (-2 147 483 648，2 147 483 647) (0，4 294 967 295) BIGINT 8 bytes (-9,223,372,036,854,775,808，9 223 372 036 854 775 807) (0，18 446 744 073 709 551 615) FLOAT 4 bytes (-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38) 0，(1.175 494 351 E-38，3.402 823 466 E+38) DOUBLE 8 bytes (-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308) 0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308) DATE 3 1000-01-01/9999-12-31 YYYY-MM-DD TIME 3 ‘-838:59:59’/‘838:59:59’ HH:MM:SS YEAR 1 1901/2155 YYYY DATETIME 8 1000-01-01 00:00:00/9999-12-31 23:59:59 YYYY-MM-DD HH:MM:SS TIMESTAMP 4 1970-01-01 00:00:00/2038结束时间是第 2147483647 秒，北京时间 2038-1-19 11:14:07，格林尼治时间 2038年1月19日 凌晨 03:14:07 CHAR 0-255 bytes 定长字符串 VARCHAR 0-65535 bytes 变长字符串 TINYBLOB 0-255 bytes 不超过 255 个字符的二进制字符串 TINYTEXT 0-255 bytes 短文本字符串 BLOB 0-65 535 bytes 二进制形式的长文本数据 TEXT 0-65 535 bytes 长文本数据 MEDIUMBLOB 0-16 777 215 bytes 二进制形式的中等长度文本数据 MEDIUMTEXT 0-16 777 215 bytes 中等长度文本数据 &lt;/details&gt; Navicat快捷键123456789101112131415161718192021打开查询窗口，新建查询窗口 Ctrl + Q打开一个mysql命令行窗口 F6运行查询窗口的SQL语句 Ctrl + R只运行选中的SQL语句 Ctrl + Shift + R运行光标右方或者已选择的语句 F7注释SQL语句 Ctrl + / 或者添加 #取消注释SQL语句 Ctrl + Shift + /在查询窗口，打开一个新的查询窗口 Ctrl + N关闭当前窗口 Ctrl + W在表内容显示页面，快速切换到表设计页面 Ctrl + D在表设计页面，快速切换到表内容显示页面 Ctrl + O删除当前行 Ctrl + L 复制本行 Ctrl + D查看历史日志 Ctrl + H跳到整篇语句开头 Ctrl + Home跳到整篇语句结尾 Ctrl + End下一个Tab Ctrl + Tab打开一个查询窗口，并打开一个SQL文件覆盖当前窗口 Ctrl + Q,Ctrl + O本行与上一行切换 Ctrl + T新建收藏夹（可把查询语句保存在收藏夹中） Ctrl + Shift + 1打开帮助文件 F1 Mysql关键字 MySQL关键字预览表 | key | function | | :-------------: | :------------------------------------------------------------: | | where | 指定条件 | | as | 起别名 （可省略） | | from | 指定数据来源 | | distinct | 去重,查询结构中重复的结果 | | like | 模糊查询 | | between | 指定查询区间 | | in | 指定查询结果列表 | | join ... on ... | 连接查询 | | inner | 内连接，取出两表共有的部分作为主表 | | left | 左连接，取出左表作为主表，右表与左表共有的部分作为从表加入主表 | | right | 右连接，取出右表作为主表，左表与右表共有的部分作为从表加入主表 | | order by | 排序 | | limit | 分页，所有语句的最后一个 | 数据库语言 DQL语言（Data Query Language） DML语言（Data Manipulation Language） DDL语言（Data Define Language) TCL语言（Transaction Control Language) DQL数据查询语言专用于数据查询,查询列表可以是表中的字段，常量，表达式，函数 1. 查看有哪些数据库1mysql&gt;show databases; 2. 查询表中有哪些字段1mysql&gt;show columns from tablename; 3. 查询记录1msyql&gt;select key0[,key1,...] from tablename [where &#x27;conditioin&#x27;]; 查询单个字段所对应的结果 1select key0 from tablename; 查询多个字段所对应的结果 1select key0,key1,... from tablename; 查询所有字段 1select * from tablename; 模糊查询 12select key from tablename where key like &#x27;pattern&#x27;;--pattern是mysql的模糊查询匹配模式 % 任意多个字符 _ 一个字符 __ 两个字 [ABCK] 指定A,B,C,K任意一个字符 [A-Z] 指定A-Z任意一个字符 [^A] 指定非A字符 … 联表查询 1234mysql&gt;select t1.key1,t2.key1 -&gt;from tablename1 as t1 -&gt;inner join tablename2 as t2 -&gt;on t1.key1 =t2.key1 自联结 例题 子查询4. 使用查询语句做运算 算术运算算术运算符预览表 符号 说明 + 加法运算 - 减法运算 / 除法运算 * 乘法运算 % 求余运算 mod 求余运算 div 除法运算 &lt;/details&gt; 12345678910111213141516171819202122232425262728293031323334353637383940mysql&gt; select 1+2*3-4/5;+-----------+| 1+2*3-4/5 |+-----------+| 6.2000 |+-----------+1 row in set (0.00 sec)mysql&gt; select &#x27;abcdefe&#x27; like &#x27;a_&#x27;;+---------------------+| &#x27;abcdefe&#x27; like &#x27;a_&#x27; |+---------------------+| 0 |+---------------------+1 row in set (0.00 sec)mysql&gt; select &#x27;abcdefe&#x27; like &#x27;a%&#x27;;+---------------------+| &#x27;abcdefe&#x27; like &#x27;a%&#x27; |+---------------------+| 1 |+---------------------+1 row in set (0.00 sec)mysql&gt; select &#x27;abcdefe&#x27; regexp &#x27;[*c]&#x27;;+-------------------------+| &#x27;abcdefe&#x27; regexp &#x27;[*c]&#x27; |+-------------------------+| 1 |+-------------------------+1 row in set (0.00 sec)mysql&gt; select &#x27;abcdefe&#x27; regexp &#x27;[*h]&#x27;;+-------------------------+| &#x27;abcdefe&#x27; regexp &#x27;[*h]&#x27; |+-------------------------+| 0 |+-------------------------+1 row in set (0.00 sec) 比较运算比较运算符预览表 运算符 说明 = 等于 &lt; 小于 … … is null 判空 is not null 判非空 between … and … 区间比较 in 属于 not in 不属于 like 模式匹配 not like 模式匹配 regexp 正则匹配 &lt;/details&gt; 1234567mysql&gt; select &#x27;A&#x27;&lt; &#x27;B&#x27;,1+1=2,7&lt;&gt;7,7!=7,&#x27;a&#x27;&lt;=&#x27;a&#x27;,&#x27;a&#x27; is null;+----------+-------+------+------+----------+-------------+| &#x27;A&#x27;&lt; &#x27;B&#x27; | 1+1=2 | 7&lt;&gt;7 | 7!=7 | &#x27;a&#x27;&lt;=&#x27;a&#x27; | &#x27;a&#x27; is null |+----------+-------+------+------+----------+-------------+| 1 | 1 | 0 | 0 | 1 | 0 |+----------+-------+------+------+----------+-------------+1 row in set (0.00 sec) 逻辑运算 逻辑运算符预览表 符号 说明 &amp;&amp; 与 \\ \\ 或 or 或 ! 非 not 非 nor 异或 &lt;/details&gt; 123456789101112131415mysql&gt; select not(&#x27;A&#x27;=&#x27;B&#x27;),(&#x27;c&#x27;=&quot;C&quot;),(&#x27;c&#x27;&lt;&#x27;D&#x27;),(1=2);+--------------+-----------+-----------+-------+| not(&#x27;A&#x27;=&#x27;B&#x27;) | (&#x27;c&#x27;=&quot;C&quot;) | (&#x27;c&#x27;&lt;&#x27;D&#x27;) | (1=2) |+--------------+-----------+-----------+-------+| 1 | 1 | 1 | 0 |+--------------+-----------+-----------+-------+1 row in set (0.00 sec)mysql&gt; select not(&#x27;A&#x27;=&#x27;B&#x27;),(&#x27;c&#x27;=&quot;C&quot;)and(&#x27;c&#x27;&lt;&#x27;D&#x27;)or(1=2);+--------------+------------------------------+| not(&#x27;A&#x27;=&#x27;B&#x27;) | (&#x27;c&#x27;=&quot;C&quot;)and(&#x27;c&#x27;&lt;&#x27;D&#x27;)or(1=2) |+--------------+------------------------------+| 1 | 1 |+--------------+------------------------------+1 row in set (0.00 sec) 位运算 位运算符预览表 符号 说明 &amp; 按位与 \\ 按位或 ~ 按位取反 ^ 按位异或 &lt;&lt; 左移 &gt;&gt; 右移 123456789101112131415mysql&gt; select 1&amp;2,1|2,1&gt;&gt;2,1&lt;&lt;2,~1,2^1;+-----+-----+------+------+----------------------+-----+| 1&amp;2 | 1|2 | 1&gt;&gt;2 | 1&lt;&lt;2 | ~1 | 2^1 |+-----+-----+------+------+----------------------+-----+| 0 | 3 | 0 | 4 | 18446744073709551614 | 3 |+-----+-----+------+------+----------------------+-----+1 row in set (0.00 sec)mysql&gt; select 2&amp;3,2|3,2&gt;&gt;3,2&lt;&lt;3,~2,2^3;+-----+-----+------+------+----------------------+-----+| 2&amp;3 | 2|3 | 2&gt;&gt;3 | 2&lt;&lt;3 | ~2 | 2^3 |+-----+-----+------+------+----------------------+-----+| 2 | 3 | 0 | 16 | 18446744073709551613 | 1 |+-----+-----+------+------+----------------------+-----+1 row in set (0.00 sec) &lt;/details&gt; 运算优先级| 优先级 | 运算符 || :——: | :—————————————————————: || 1 | ! || 2 | ~ || 3 | ^ || 4 | * / % div mod || 5 | + - || 6 | &gt;&gt; &lt;&lt; || 7 | &amp; || 8 | | || 9 | =,&lt;=&gt;,&lt;,&gt;=,&lt;=,&lt;&gt;,!=,&gt;,in,is,null,like,regexp || 10 | between and,case,when,then,else || 11 | not || 12 | &amp;&amp; and || 13 | || or xor || 14 | := (赋值号) | DDL数据定义语言设计对库和表的管理，包括创建、删除、修改 数据库相关操作 关键字 123创建:create修改:alter删除:drop 创建数据库 12345678910111213-- sql server下创建CREATE DATABASE EDUC ;ON PRIMARY(NAME =&quot;student_data&quot;,FILENAME=&#x27;D:\\29247\\Documents\\MYSQL\\sql_data\\student_data.mdf&#x27;,SIZE = 10,MAXSIZE = 50,FILEGROWTH = 5%)LOG ON (NAME = &quot;student_log&quot;,FILENAME =&#x27;D:\\29247\\Documents\\MYSQL\\sql_data\\student_log.ldf&#x27;,SIZE = 2MB,MAXSIZE = 5MB,FILEGROWTH = 1MB) 1234-- Mysql下创建create database databasename;-- 以默认方式创建数据库create database databasename charset=utf8;-- 以指定方式创建数据库create database [if not exists] databasename; 查看怎样创建的数据库 1show create database [if exists] databasename; 删除数据库 1drop database databasename; 删除数据库时，可能遇到一下问题 表的相关操作一 .表的设计 字段的属性 每张表都会存在一下5个字段 id 主键 version 乐观锁 is_delete伪删除 gmt_create创建时间 gmt_update修改时间 表的创建 1234567create table if not exists `tablename`( &#x27;attr&#x27; type(width) not NULL AUTO_INCREMENT COMMENT &#x27;description&#x27;, ‘attr1’ type(width) not NULL DEFAULT &#x27; &#x27; COMMENT &#x27; &#x27;, 字段 类型 是否为空 自动增长 备注， ... primary key (&#x27;attr&#x27;))ENGINE=INNODB DEFAULT CHARSET=utf-8; 表的修改 修改表名 1alter table &quot;表名&quot; rename as &#x27;表名&#x27;; 添加字段 1alter table &quot;表名&quot; add 字段名 字段属性 [字段属性] 修改表的字段 1alter table &quot;表名&quot; modify 字段名 字段属性 --修改表的属性 1alter table &quot;表名&quot; change 字段名 字段名 字段属性 --表的字段重命名 删除表的字段 1alter table &quot;表名&quot; drop 字段名 删除表 1drop table &quot;tablename&quot; 添加外键 12alter table &quot;表名&quot;add constraint &#x27;FK_字段名&#x27; foreign key(`字段名`) references `字段名`; 一般不建议在表中直接引用外键，推荐在应用层实现外键操作 二.表数据的操作 插入 1insert into tablename(attr0[,attr1,...]) values (value0[,value1,...]); 12insert into tablename values (value0,value1,...); --不写表的字段时values需要全部写出 12insert into tablename values (value0,value1,...),(value0,value1,...),...; --同时添加多条记录 修改 不指定修改条件会改动所有的字段 update table set key=&#39;value&#39;; 1update tablename set key1=&#x27;value1&#x27;, key2=&#x27;value2&#x27; where &#x27;conditions&#x27;; 删除 delete和truncat 相同点：都能删除表中的数据但不会删除表的结构 不同点：delete不会清空自增，truncat会清空自增 delete删除的问题，使用delete删除数据库的现象： InnoDB 自增会从1开始（存在内存中） MyISAM 自增会从上以自增量开始(存在文件中) 不指定删除条件会删除所有的字段 delete from tablename 1delete from tablename where &#x27;conditions&#x27;; 清空表中的数据 1truncate tablename; SQL编程 Mysql函数 数学函数| 函数 | 功能 || :————————-: | :—————————————————-: || abs(number) | 求绝对值 || sign(number) | 返回number的符号 $s$,$s \\in {-1,0,1}$ || sin(number) | 正弦 || cos(number) | 余弦 || tan(number) | 正切 || asin(number) | 反正弦 || acos(number) | 反余弦 || atan(number) | 反正切 || ceiling(number) | 向上取整 || floor(number) | 向下取整 || round(number[,int]) | 默认四舍五入，int参数指定保留小数位 || greatest(array) | 求最大值 || least(array) | 求最小值 || degree(radian) | 弧度转角度 || radians(degree) | 角度转弧度 || Pi() | $\\pi$ || exp(number) | $e^{value}$ || log(number) | $\\loge(number)$ || log10(number) | $log{10}(number)$ || pow(a,n) | $a^n$ || sqrt(n) | $\\sqrt n$ || rand() | 产生随机数$x$, $x \\in(0,1)$ | 字符串函数| 函数 | 功能 || :—————————————: | :—————————————————————————-: || char_length(str) | 求字符串字符长度 || concat(str1,str2[,str3,…]) | 拼接字符串 || left(str,i) | 返回0~i的子串 || right(str,i) | 返回i~length的子串 || length(str) | 求字符串字节长度 || lower(str) | 转小写 || upper(str) | 转大写 || ltrim(str) | 删除起始空格 || rtrim(str) | 删除末尾空格 || replace(str1,str2,str3) | 用str3替换str1中的str2 || reverse(str) | 反转 || substring(str,i,j) | 取i~j的子窜$substr,substr = str[i;j]$其中 $ i,j$ 可取 | 聚合函数 | 函数 | 功能 || :————: | :—————-: || avg(field) | 求平均值 || count(*) | 求arr元素个数 || max(field) | 求最大值 || min(field) | 求最小值 || sum(field) | 求和 | 时间日期函数 加密函数 函数的使用 12345678-&gt;select date_format(now(),&quot;%Y年%m月%d日 %H点%i分%s秒&quot;); +------------------------------------------------+| date_format(now(),&quot;%Y年%m月%d日 %H点%i分%s秒&quot;) |+------------------------------------------------+| 2021年06月09日 11点07分10秒 |+------------------------------------------------+1 row in set (0.01 sec) Mysql自定义函数 当函数体为复合类型时，应该使用begin ... end包裹复合结构 创建函数不能重名 符合结构中可以包含声明、循环、条件控制等语句 创建无参函数:123-&gt;create function function_name()-&gt;returns return_type-&gt;return return_body; 注：创建函数之前需要先信任函数创建者set global log_bin_trust_function_creators=1; 例:123-&gt;create function mydate() -&gt;returns varchar(30)-&gt;return date_format(now(),&quot;%Y年%m月%d日 %H点%i分%s秒&quot;); 1234567-&gt; select mydate();+-----------------------------+| mydate() |+-----------------------------+| 2021年06月09日 11点14分30秒 |+-----------------------------+1 row in set (0.00 sec) 创建有参函数123-&gt;create function function_name(num1 type,num2 type)-&gt;returns return_type-&gt;return return_body; 例:123-&gt;create function myAvg(num1 int,num2 int) -&gt;returns int-&gt;return (num1+num2)/2; 1234567-&gt;select myAvg(10,14);+--------------+| myAvg(10,14) |+--------------+| 12 |+--------------+1 row in set (0.01 sec) 删除函数：1drop function [if exists] function_name; Mysql自定义存储过程存储过程（Stored Procedure）是一种在数据库中存储复杂程序，以便外部程序调用的一种数据库对象。 存储过程是为了完成特定功能的SQL语句集，经编译创建并保存在数据库中，用户可通过指定存储过程的名字并给定参数(需要时)来调用执行。 存储过程思想上很简单，就是数据库 SQL 语言层面的代码封装与重用。 无参存储过程的创建12-&gt;create procedure procedure_name()-&gt;procedure_body; 例: 12-&gt;create procedure show_version()-&gt;select version(); 调用: 123456789-&gt;call show_version();+-----------+| version() |+-----------+| 8.0.23 |+-----------+1 row in set (0.01 sec)Query OK, 0 rows affected (0.01 sec) 有参数的存储过程的创建1delimiter // 12345mysql&gt; create procedure delete_cou_by_cid(id int)-&gt; begin-&gt; delete from cou where cid=id;-&gt; end-&gt; // 1-&gt;call delete_cou_by_cid(1)// 创建存储过程时参数和字段不能是相同名称 带返回值的存储过程12345mysql&gt; create procedure delete_cou_by_cid(in id int,out num int)-&gt; begin-&gt; delete from cou where cid=id into num;-&gt; end-&gt; // 12call delete_cou_by_cid(1,@num)//select @num// out关键字指定存储过程的返回值 条件语句:12345678910111213141516-&gt; DELIMITER // -&gt; CREATE PROCEDURE proc2(IN parameter int) -&gt; begin -&gt; declare var int; -&gt; set var=parameter+1; -&gt; if var=0 then -&gt; insert into t values(17); -&gt; end if; -&gt; if parameter=0 then -&gt; update t set s1=s1+1; -&gt; else -&gt; update t set s1=s1+2; -&gt; end if; -&gt; end; -&gt; // mysql &gt; DELIMITER ; case语句:1234567891011121314151617181920212223mysql &gt; DELIMITER // mysql &gt; CREATE PROCEDURE proc3 (in parameter int) -&gt; begin -&gt; declare var int; -&gt; set var=parameter+1; -&gt; case var -&gt; when 0 then -&gt; insert into t values(17); -&gt; when 1 then -&gt; insert into t values(18); -&gt; else -&gt; insert into t values(19); -&gt; end case; -&gt; end; -&gt; // mysql &gt; DELIMITER ; casewhen var=0 theninsert into t values(30);when var&gt;0 thenwhen var&lt;0 thenelseend case 循环语句: while ... end while在执行操作前检查结果 123456789101112mysql &gt; DELIMITER // mysql &gt; CREATE PROCEDURE proc4() -&gt; begin -&gt; declare var int; -&gt; set var=0; -&gt; while var&lt;6 do -&gt; insert into t values(var); -&gt; set var=var+1; -&gt; end while; -&gt; end; -&gt; // mysql &gt; DELIMITER ; repeat ... end repeat在执行操作后检查结果 12345678910111213mysql &gt; DELIMITER // mysql &gt; CREATE PROCEDURE proc5 () -&gt; begin -&gt; declare v int; -&gt; set v=0; -&gt; repeat -&gt; insert into t values(v); -&gt; set v=v+1; -&gt; until v&gt;=5 -&gt; end repeat; -&gt; end; -&gt; // mysql &gt; DELIMITER ; loop ·····endlooploop 循环不需要初始条件，这点和 while 循环相似，同时和 repeat 循环一样不需要结束条件, leave 语句的意义是离开循环。 123456789101112131415mysql &gt; DELIMITER // mysql &gt; CREATE PROCEDURE proc6 () -&gt; begin -&gt; declare v int; -&gt; set v=0; -&gt; LOOP_LABLE:loop -&gt; insert into t values(v); -&gt; set v=v+1; -&gt; if v &gt;=5 then -&gt; leave LOOP_LABLE; -&gt; end if; -&gt; end loop; -&gt; end; -&gt; // mysql &gt; DELIMITER ; 存储过程与函数的比较存储过程的功能更复杂，函数的针对性更强 存储过程可以返回多个值，函数只能返回一个值 存储过程一般独立执行，函数可以作为其他SQL语句的一个组成部分","categories":[{"name":"MySQL","slug":"MySQL","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/MySQL/"}],"tags":[],"keywords":[{"name":"MySQL","slug":"MySQL","permalink":"https://dreamcatcherdeng.gitee.io/personal-blog/categories/MySQL/"}]}]}